- name: register mac addresses
  shell: |
      virsh domiflist {{ item }} | awk '/{{ net }}/ {print $5}'
  with_items: "{{ resources }}"
  register: mac_list
  become: "{{ libvirt_become }}"

- name: set vm_inv_info fact
  set_fact:
     vm_inv_info: "{{ vm_inv_info | default({})|combine({ item.cmd.split()[2]: { 'mac': item.stdout}}) }}"
  with_items: "{{ mac_list.results }}"

- name: wait for VMs IPs
  shell: |
      virsh net-dhcp-leases {{ net }} | awk '($4 == "ipv4")  && ($3 == "{{ item.value.mac }}") {print $5}'
  register: ip_list
  until: "ip_list.stdout != ''"
  retries: 40
  delay: 5
  with_dict: "{{ vm_inv_info }}"
  become: "{{ libvirt_become }}"

- name: construct dict with node name as key and with ip as value
  set_fact:
      vm_ip_dict: "{{ vm_ip_dict | default({}) | combine({ item.item.key: { 'ip': item.stdout|ipaddr('address') }}) }}"
  when: item.stdout|default(False)
  with_items: "{{ ip_list.results }}"

- name: merge ip addresses to the vm_inv_info dict
  set_fact:
      vm_inv_info: "{{ vm_inv_info | default({}) | combine(vm_ip_dict|default({}), recursive=True) }}"

- name: make IPs persistent
  shell: "virsh net-update {{ net }} add ip-dhcp-host \"<host mac='{{ item.value.mac }}' name='{{ item.key }}.{{ cluster_domain }}' ip='{{ item.value.ip }}' />\" --live --config"
  when: item.value.ip is defined
  with_dict: "{{ vm_inv_info }}"
  become: "{{ libvirt_become }}"

- name: Use local dnsmasq for name resolution
  ini_file:
    path: /etc/NetworkManager/conf.d/dnsmasq.conf
    section: main
    option: dns
    value: dnsmasq
  become: "{{ libvirt_become }}"

- name: Set up local dnsmasq for apps and api name resolution
  copy:
    content: |
       address=/.apps.{{ cluster_domain }}/192.168.123.10
       address=/api.{{ cluster_domain }}/192.168.123.5
    dest: /etc/NetworkManager/dnsmasq.d/dnsmasq.{{ cluster_domain }}.conf
  become: "{{ libvirt_become }}"

- name: Add nodes name resolution to local dnsmasq
  lineinfile:
    path: /etc/NetworkManager/dnsmasq.d/dnsmasq.{{ cluster_domain }}.conf
    line: "address=/{{ item.key }}/{{ item.value.ip }}"
  with_dict: "{{ vm_inv_info }}"
  become: "{{ libvirt_become }}"

- name: Reload NetworkManager
  service:
    name: NetworkManager
    state: reloaded
  become: "{{ libvirt_become }}"
