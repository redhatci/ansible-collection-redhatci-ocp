---
- name: "Assert that host name exists"
  ansible.builtin.assert:
    that: item['name'] is defined
    success_msg: "{{ item['name'] }} have a name attribute"
    fail_msg: "{{ item }} missing name attribute"
  loop: "{{ hosts }}"

- name: "List nodes"
  community.libvirt.virt:
    command: list_vms
  register: _ool_vms_list

- name: "Set ool_hosts_names"
  ansible.builtin.set_fact:
    ool_hosts_names: "{{ ool_hosts_names | default([]) + [host['name']] }}"
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host

- name: "Set ool_nodes_list"
  ansible.builtin.set_fact:
    ool_nodes_list: "{{ ool_hosts_names | difference(_ool_vms_list.list_vms) }}"

- name: "Set ool_qemu_path"
  ansible.builtin.set_fact:
    ool_qemu_path: "{{ (ansible_distribution in ['CentOS', 'RedHat']) | ternary('/usr/libexec/', '/usr/bin/') }}"

- name: "Copy image_src:"
  ansible.builtin.include_tasks: copy_image_src.yml
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host
  when: host['name'] in ool_nodes_list

- name: "Create nodes disks sizes dictionary"
  vars:
    disks:
      disk_size: resize
      disk2_size: create
    qemu_action: "{{ disks[item[1]] | default(None) }}"
    disk_number: "{{ (item[1] == 'disk2_size') | ternary('-disk2', '') }}"
  ansible.builtin.set_fact:
    ool_nodes_disks_sizes: >-
      {{ ool_nodes_disks_sizes | default({}) |
         combine({ item[0]['name']  +  disk_number: {
           'action': qemu_action,
           'size': item[0][item[1]]  }},
         recursive=true) }}
  loop: "{{ hosts | product(['disk_size', 'disk2_size']) | list }}"
  when: item[0]['name'] in ool_nodes_list and item[0][item[1]] is defined

- name: "OS disk create/resize"
  vars:
    _ool_action: "{{ item['value']['action'] }}"
  become: "{{ libvirt_become }}"
  ansible.builtin.command: >-
    qemu-img {{ _ool_action }}
      {{ (_ool_action == 'create') | ternary('-f qcow2', '') }}
      {{ libvirt_image_path }}/{{ item['key'] }}.qcow2
      +{{ item['value']['size'] }}
  loop: "{{ ool_nodes_disks_sizes | ansible.builtin.dict2items }}"
  register: _ool_cmd_output
  changed_when: >-
    _ool_cmd_output.stdout == "Image resized." or
    _ool_cmd_output.stdout == "^Formatting .* fmt=qcow .*"

- name: "Create directories"
  ansible.builtin.file:
    path: "/tmp/vm-{{ item }}"
    state: "directory"
    mode: "0755"
  loop: "{{ ool_nodes_list }}"

- name: "Prepare cloud-config/user-data-local"
  ansible.builtin.template:
    src: "templates/cloud-config/user-data"
    dest: "/tmp/vm-{{ host['name'] }}/user-data"
    mode: "0644"
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host
  when: host['name'] in ool_nodes_list

- name: "Prepare cloud-config/meta-data"
  ansible.builtin.template:
    src: "templates/cloud-config/meta-data"
    dest: "/tmp/vm-{{ host['name'] }}/meta-data"
    mode: "0644"
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host
  when: host['name'] in ool_nodes_list

- name: "Generate ci data cd image for cloud-init when cloud config is defined"
  ansible.builtin.command: |
    mkisofs -o /tmp/vm-{{ item }}.iso -V cidata -r -J
      --quiet /tmp/vm-{{ item }}/user-data
      /tmp/vm-{{ item }}/meta-data
  become: "{{ libvirt_become }}"
  loop: "{{ ool_nodes_list }}"

- name: "Define node"
  community.libvirt.virt:
    name: "{{ host['name'] }}"
    command: define
    xml: "{{ lookup('template', 'libvirt_node.xml.j2') }}"
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host
  when: host['name'] in ool_nodes_list

- name: Sync memory data to disk
  ansible.builtin.command: sync

- name: "Start VM"
  community.libvirt.virt:
    name: "{{ item }}"
    state: "running"
  loop: "{{ ool_nodes_list }}"

- name: "Wait for VM to shut down"
  community.libvirt.virt:
    name: "{{ item }}"
    command: status
  register: _ool_vmstatus
  until: _ool_vmstatus.status == 'shutdown'
  retries: 1500
  delay: 10
  loop: "{{ ool_nodes_list }}"

- name: "Remove cdrom (cloud-init)"
  ansible.builtin.command: virsh change-media {{ item }} hda --eject --config
  become: "{{ libvirt_become }}"
  loop: "{{ ool_nodes_list }}"
  register: _ool_eject
  changed_when: _ool_eject.stdout == "Successfully ejected media."

- name: Sync memory data to disk
  ansible.builtin.command: sync

- name: "Start VM again"
  community.libvirt.virt:
    name: "{{ item }}"
    state: "running"
  loop: "{{ ool_nodes_list }}"
...
