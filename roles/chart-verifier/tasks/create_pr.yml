
---

- name: "Login to Github"
  shell: "{{ gh_tool_path }} auth login --with-token < {{ github_token_path }}"
  args:
    chdir: "{{ work_dir }}"
  register: gh_login
  failed_when: gh_login.rc != 0

- name: "Configure Git protocol"
  shell: "{{ gh_tool_path }} config set git_protocol ssh"

- name: "Get GitHub status details"
  shell:
    cmd: "{{ gh_tool_path }} api user --jq .login"
  register: github_status

- name: "Get the GitHub username"
  set_fact:
    github_username: "{{ github_status.stdout }}"

- name: "Set local branch name"
  set_fact:
    local_branch: "{{ chart_name }}_{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"

- name: "Generate a one time use SSH key"
  openssh_keypair:
    path: "{{ work_dir }}/ssh_key"
    type: ed25519
    state: present
    force: no

- name: "Read public key file contents"
  set_fact:
    public_key: "{{ lookup('file', '{{ work_dir }}/ssh_key.pub' ) }}"

- name: "Add ssh-key to Github"
  shell: "{{ gh_tool_path }} api -X POST user/keys -f key='{{ public_key }}'"
  register: gh_add_response
  args:
    chdir: "{{ work_dir }}"

- name: "Get the SSK key ID"
  set_fact:
    key_id: "{{ ( gh_add_response.stdout | from_json ).id }}"

- name: "Fork the {{ target_repository }} for Helm {{ chart_name }}"
  shell: "{{ gh_tool_path }} repo fork {{ target_repository }}"
  args:
    chdir: "{{ work_dir }}"
  register: gh_fork
  failed_when: gh_fork.rc != 0

- name: "Sync the {{ target_repository }} fork"
  shell: "{{ gh_tool_path }} repo sync {{ github_username }}/charts --force"
  args:
    chdir: "{{ work_dir }}"
  register: gh_fork_sync
  failed_when: gh_fork_sync.rc != 0

- name: "Clone the {{ github_username }}/charts repository"
  shell:
    cmd: "{{ gh_tool_path }} repo clone {{ github_username }}/charts"
  args:
    chdir: "{{ work_dir }}"

- name: "Set chart path"
  vars:
    partner: "{{  partner_name | replace(' ','_') }}"
  set_fact:
    chart_path: "{{ work_dir }}/charts/charts/partners/{{ partner }}/{{ chart_name }}/{{ chart_version }}/"

- name: "Check if chart_path already exists"
  vars:
    partner: "{{  partner_name | replace(' ','_') }}"
  stat:
    path: "{{ work_dir }}/charts/charts/partners/{{ partner }}/{{ chart_name }}/{{ chart_version }}/"
  register: chart_dir

- name: "Fail if chart is already in the repository"
  fail:
    msg: "There is a chart already in the repository for this version"
  when: chart_dir.stat.exists

- name: "Git create a local branch"
  shell: "git checkout -b {{ local_branch }}"
  args:
    chdir: "{{ work_dir }}/charts/charts"

- name: "Create target directory on the repository"
  file:
    state: directory
    force: true
    path: "{{ chart_path }}"

- name: "Copy the report to the target directory"
  copy:
    src: "{{ work_dir }}/report.yaml"
    dest: "{{ chart_path }}"
    remote_src: yes
  delegate_to: localhost

- name: "Copy the chart tarball to the target directory"
  get_url:
    url: "{{ chart.chart_file }}"
    dest: "{{ chart_path }}"
    mode: u=rwx,g=rx,o=rx

- name: "Git add chart_file and report.yaml to the repository"
  vars:
    partner: "{{  partner_name | replace(' ','_') }}"
  shell:
    cmd: |
     git config user.email {{ partner_email }}
     git config user.name {{ github_username }}
     git add {{ work_dir }}/charts/charts/partners/{{ partner }}/OWNERS
     git add {{ work_dir }}/charts/charts/partners/{{ partner }}/{{ chart_name }}/{{ chart_version }}/
     git commit -m 'Added {{ chart_name }}_{{ chart_version }}'
  args:
    chdir: "{{ work_dir }}/charts/charts"

- name: "Push branch and create PR to the forked repository"
  shell:
    cmd: |
      eval "$(ssh-agent)"
      ssh-add {{ work_dir }}/ssh_key
      git push -u origin {{ local_branch }}
      {{ gh_tool_path }} pr create \
      --title "Adding chart {{ chart_name }} from {{ partner_name }}" \
      --body "Adding chart {{ chart_name }} from {{ partner_name }} - DCI Job: {{ job_id }}" \
      --repo {{ target_repository }}
  args:
    chdir: "{{ work_dir }}/charts/charts"
  register: pr_details

- name: "Get PR submission details"
  debug:
    msg: "{{ pr_details.stdout_lines[2] }}"
  when: pr_details.rc == 0

- name: "Append details to the general report"
  lineinfile:
    path: "{{ logs_dir }}/helm-submission-report.txt"
    line:
      " {{ chart_name }} {{ chart_version }} submitted via {{ pr_details.stdout_lines[2] }}"
    insertafter: EO
  notify:
    - "helm-chart-verifier cleanup"
...
