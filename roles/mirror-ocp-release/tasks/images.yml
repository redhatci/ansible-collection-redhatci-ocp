---
- name: "Check if rhcos.json exists"
  stat:
    path: "{{ cache_dir }}/{{ version }}/rhcos.json"
    get_checksum: false
  register: rhcos_json

- name: "Get git SHA from installer"
  shell: >
    {{ cache_dir }}/{{ version }}/openshift-baremetal-install version |
    grep "^built from" |
    awk '{ print $NF }'
  register: commit_id
  changed_when: false
  when:
    - not rhcos_json.stat.exists or force_mirroring

- name: "Fetch rhcos.json File [<= 4.7]"
  get_url:
    url: "https://raw.githubusercontent.com/openshift/installer/{{ commit_id.stdout }}/data/data/rhcos.json"
    dest: "{{ cache_dir }}/{{ version }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
    setype: httpd_sys_content_t
    timeout: 300
  become: true
  register: rhcos_json_file
  retries: 3
  delay: 10
  until: rhcos_json_file is not failed
  when:
    - version is version("4.8", "<")
    - not rhcos_json.stat.exists or force_mirroring

- name: "Fetch rhcos.json File [>= 4.8]"
  shell: >
    {{ cache_dir }}/{{ version }}/openshift-baremetal-install coreos print-stream-json >>
    {{ cache_dir }}/{{ version }}/rhcos.json
  register: rhcos_json_file
  retries: 3
  delay: 10
  until: rhcos_json_file is not failed
  when:
    - version is version("4.8", ">=")
    - not rhcos_json.stat.exists or force_mirroring

- name: "Load variables from rhcos.json"
  include_vars:
    file: "{{ cache_dir }}/{{ version }}/rhcos.json"
    name: rhcos_json_vars

- name: "Mirror IPI images"
  include_tasks: ipi_images.yml
  when:
    - install_type == 'ipi'

- name: "Mirror SNO virtual images"
  include_tasks: sno_virtual_images.yml
  when:
    - install_type == 'sno'
    - sno_install_type == 'virtual'

- name: "Mirror SNO baremetal images"
  include_tasks: sno_baremetal_images.yml
  when:
    - install_type == 'sno'
    - sno_install_type == 'baremetal'

- name: "Check if container_images.done exists"
  stat:
    path: "{{ cache_dir }}/{{ version }}/container_images.done"
    get_checksum: false
  register: container_images_done

- name: "Mirror release images to local registry"
  command: >
    {{ cache_dir }}/{{ version }}/oc adm release mirror
    --registry-config={{ cache_dir }}/{{ version }}/registry-auths.json
    --from={{ release_image.stdout | quote }}
    --to-release-image={{ registry_url | urlsplit('netloc') }}{{ registry_url | urlsplit('path') }}:{{ release_version.stdout }}
    --to={{ registry_url | urlsplit('netloc') | quote }}{{ registry_url | urlsplit('path') | quote }}
  retries: 3
  delay: 10
  register: result
  until: result.rc == 0
  when:
    - not container_images_done.stat.exists or force_mirroring

- name: "Marker for container images mirrored"
  file:
    dest: "{{ cache_dir }}/{{ version }}/container_images.done"
    state: touch
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
  when:
    - not container_images_done.stat.exists or force_mirroring
...
