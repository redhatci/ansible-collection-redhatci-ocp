---
- name: Check ansible version
  fail:
    msg: Use Ansible version 2.9 or greater to run this playbook
  when: ansible_version.full is version('2.9.0', '<')
  delegate_to: localhost
  tags:
  - always
  - validation
  - fully_disconnected

- name: Ensure Python libraries are installed
  python_requirements_info:
    dependencies:
    - netaddr
  register: _py_facts
  delegate_to: localhost
  tags:
  - always
  - validation

- name: Fail if version is undefined, empty, or not valid.
  assert:
    fail_msg: "The version is undefined or not valid. Use a value such as 'latest-4.8' or an explicit version i.e.: '4.8.2'."
    that:
      - ver is defined
      - ver is version("4.8", ">=")
  vars:
    ver: "{{ version.split('latest-')[1]|default(version) }}"
  tags:
  - always
  - validation

- name: Fail if build is undefined, empty or not valid.
  assert:
    fail_msg: "The build is undefined, empty or not valid. Use a value such as 'nightly', 'dev' or 'ga'."
    that:
      - build is defined
      - build in ("dev", "ga", "nightly")
  tags:
  - always
  - validation

- name: Fail if a required install-config variable is undefined or empty.
  assert:
    fail_msg: "A variable regarding install-config.yml is undefined or empty."
    that:
      - domain is defined
      - domain|length != 0
      - cluster is defined
      - cluster|length != 0
      - extcidrnet is defined
      - extcidrnet|length != 0
      - pullsecret is defined
      - pullsecret|length != 0
  tags:
  - always
  - validation

- name: Set release_url
  set_fact:
    release_url: "{{ (webserver_url|length) | ternary(webserver_url, '/'.join(hostvars.localhost.url.split('/')[:-1])) }}"
  tags:
  - always
  - validation

- name: Confirm whether or not internet connectivity on provisioner host
  uri:
    url: https://www.redhat.com
    status_code: [-1, 200, 301]
    timeout: 1
  register: check_url
  tags:
  - validation

- name: Take actions when no internet access
  block:
  - name: Notify when provision host has no online access (can't assume access)
    debug:
      msg: |
           A host with online access is required. For disconnected mode include registry_host group in the inventory

  - name: Set fact when could not reach web server
    set_fact:
      cache_provisioner: false
  when:
    - check_url.status == -1
  tags:
    - validation
    - cache

- name: Check if web server responded with status code
  set_fact:
    cache_provisioner: true
  when:
    - check_url.status in [200, 301]
  tags:
    - validation
    - cache

- name: Fail if dualstack_baremetal and ipv4_baremetal are both true
  fail:
    msg: Only one of ipv4_baremetal and dualstack_baremetal variables can be true
  when: ipv4_baremetal and dualstack_baremetal
  tags:
  - always
  - validation

- name: Check for valid extcidrnet (IPv4)
  fail:
    msg: extcidrnet should be a valid IPv4 CIDR
  when: not ipv6_enabled|bool and not extcidrnet|ipv4
  tags:
  - always
  - validation

- name: Check for valid extcidrnet (IPv6)
  fail:
    msg: extcidrnet6 should be a valid IPv6 address
  when: ipv6_enabled|bool and not (ipv4_baremetal or dualstack_baremetal) and not extcidrnet6|ipv6
  tags:
  - always
  - validation

- name: Check for valid extcidrnet and extcidrnet6 (Dual-Stack)
  fail:
    msg: extcidrnet should be a valid IPv4 address and extcidrnet6 should be a valid IPv6 address
  when: ipv6_enabled|bool and dualstack_baremetal|bool and not (extcidrnet|ipv4 and extcidrnet6|ipv6)
  tags:
  - always
  - validation

- name:  Gather the rpm package facts
  package_facts:
    manager: auto
  tags:
  - always
  - validation
  when: (ansible_facts.packages is undefined) or (ansible_facts.packages | length == 0)

- name: Set Fact for firewall variable
  set_fact:
    firewall: "iptables"
  when: "'iptables-services' in ansible_facts.packages"
  tags:
  - always
  - validation

- name: "Ensure cache_dir is created"
  file:
    path: "{{ cache_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  become: true
...
