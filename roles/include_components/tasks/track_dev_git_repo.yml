---
# We need to check the SHA in this way, because extract-dependencies changes
# the commit id when creating the new branch based on the PR, but only if new
# PRs are merged in the repo and we have not included them in our change. In
# these cases, the original id is saved in .git/ORIG_HEAD file. Else, we can
# find it in the location called `.git/refs/heads/prXXX`
- name: "Check if .git/ORIG_HEAD file exists"
  ansible.builtin.stat:
    path: "{{ item }}/.git/ORIG_HEAD"
  register: orig_head_file

# Actions when .git/ORIG_HEAD file exists
- name: Retrieve commit SHA from the downloaded repo - from ORIG_HEAD
  ansible.builtin.command: "cat {{ item }}/.git/ORIG_HEAD"
  register: last_commit_id_orig
  when: orig_head_file.stat.exists

# Actions when .git/ORIG_HEAD file does not exist
- name: Retrieve commit SHA from the downloaded repo - from refs
  ansible.builtin.shell: cat .git/refs/heads/$(git rev-parse --abbrev-ref HEAD)
  register: last_commit_id_refs
  args:
    chdir: "{{ item }}"
  when: not orig_head_file.stat.exists

# We need to do this because, if .git/ORIG_HEAD file exists, first task
# checking commitId works and second one is skipped, but the registered
# variable is unset, causing an error in the execution of next tasks.
- name: Set commit SHA retrieval result
  ansible.builtin.set_fact:
    last_commit_id: "{{ orig_head_file.stat.exists | ternary(last_commit_id_orig, last_commit_id_refs) }}"

- name: Get repo url  # noqa: command-instead-of-module
  ansible.builtin.command: git -C {{ item }} config --get remote.origin.url
  register: repo_url
  when: last_commit_id.rc == 0
  no_log: true

- name: Search for the git component
  ansible.legacy.dci_component:
    state: search
    topic_id: "{{ job_info['job']['topic_id'] }}"
    uid: "{{ last_commit_id.stdout }}"
  register: _ic_search_git_component
  when: last_commit_id.rc == 0

- name: Create git repo component
  ansible.legacy.dci_component:
    display_name: "{{ repo_url.stdout | basename | regex_replace('[.]git$', '') }} {{ last_commit_id.stdout[:7] }}"
    version: "{{ last_commit_id.stdout[:7] }}"
    uid: "{{ last_commit_id.stdout }}"
    team_id: "{{ job_info['job']['team_id'] }}"
    topic_id: "{{ job_info['job']['topic_id'] }}"
    type: "{{ repo_url.stdout | basename | regex_replace('[.]git$', '') }}"
    url: "{{ repo_url.stdout | regex_replace('^(.*):(.*)@(.*)', 'https://\\3') | regex_replace('^ssh://(.*)@(.*)', 'https://\\2') | regex_replace('[.]git$', '') }}/commit/{{ last_commit_id.stdout }}"
    state: present
  register: git_component
  when:
    - last_commit_id.rc == 0
    - _ic_search_git_component.components | length == 0

- name: 'Attach git component to the job'
  # dci_component plugin does not provide a consistent return value
  # In a search returns a list of components, in a create returns a single component
  # We need to default values to avoid errors during the assignment of the component id
  vars:
    c_id: "{{ git_component.changed | ternary(git_component.component.id | default(''), _ic_search_git_component.components[0].id | default('')) }}"
  ansible.legacy.dci_job_component:
    component_id: "{{ c_id }}"
    job_id: " {{ job_id }} "
  register: job_component_result
  until: job_component_result is not failed
  retries: 5
  delay: 20
  when:
    - last_commit_id.rc == 0
    - git_component.changed or _ic_search_git_component.components | length > 0
...
