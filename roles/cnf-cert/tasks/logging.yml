---

- name: Set tnf_logs_location variable
  set_fact:
    tnf_logs_location: "{{ tnf_dir }}/{{ test_network_function_project_name }}"

# There are three types of files to be submitted:
# - Configuration files - tnf_config.yml
# - Execution logs - dci-tnf-execution.log
# - Results of the execution - (these are only generated if the tnf execution was correct) - JUnit XML report and
# claim.json file
- name: Copy files related to CNF Cert Suite
  copy:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}"
  with_fileglob:
    - "{{ tnf_logs_location }}/dci-tnf-execution.log"
    - "{{ tnf_logs_location }}/tnf_config.yml"
    - "{{ tnf_logs_location }}/*.xml"
    - "{{ tnf_logs_location }}/*.json"

# We will handle HTML report logging process separately (this is only loaded starting from tnf v4.3.1).
# This is because, if using tnf v4.3.1 or v4.3.2, feedback feature is not provided, but starting
# from tnf v4.3.3 in advance, feedback feature is supported, and the feedback has to be added to the
# compressed file (so we have to avoid the copy of the original compressed file to avoid duplicities,
# since the addition of a file to a compressed file in Ansible requires to unarchive and archive again).
# Note this is only generated if the tnf execution was correct, and it is based on a tar.gz
# containing the files needed to generate the HTML report.
- name: (tnf v4.3.1-v4.3.2) Copy HTML report if generated
  copy:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}"
  with_fileglob:
    - "{{ tnf_logs_location }}/*-cnf-test-results.tar.gz"
  when:
    - test_network_function_version is version('v4.3.1', '>=')
    - test_network_function_version is version('v4.3.2', '<=')
    - test_network_function_version != 'HEAD'

# Feedback can only be appended to HTML report starting with v4.3.3, where this feature is officially
# supported. In this case, we need to unarchive the tar.gz file and to archive it again with the feedback
# file included.
- name: (tnf v4.3.3 in advance) Manipulate HTML report to append feedback
  block:
    # Since we need to manually unarchive-archive the report, we need to firstly check if the compressed
    # file exists.
    - name: Check if HTML report has been generated and copied
      find:
        paths: "{{ tnf_logs_location }}"
        patterns:
          - "*-cnf-test-results.tar.gz"
      register: html_report_search

    - name: Update HTML report
      block:
        # Just to reuse the same file name, let's save it now.
        - name: Set HTML report compressed file name based on the one generated by CNF Cert Suite
          set_fact:
            html_report_filename: "{{ html_report_search.files[0].path.split('/')[-1] }}"

        - name: Create new directory to uncompress files from HTML report compressed file
          file:
            path: "{{ tnf_logs_location }}/cnf-test-results"
            state: directory

        - name: Unarchive original HTML report
          unarchive:
            src: "{{ tnf_logs_location }}/{{ html_report_filename }}"
            dest: "{{ tnf_logs_location }}/cnf-test-results"

        - name: Create feedback.js
          template:
            src: templates/feedback.js.j2
            dest: "{{ tnf_logs_location }}/cnf-test-results/feedback.js"

        - name: Compress HTML results web page to upload it to DCI
          archive:
            path:
              - "{{ tnf_logs_location }}/cnf-test-results/*"
            dest: "{{ job_logs.path }}/{{ html_report_filename }}"
      when: html_report_search.files | length > 0
  when: test_network_function_version is version('v4.3.3', '>=') or test_network_function_version == 'HEAD'

# claim.json file must be present if the execution finished correctly
# This is needed for the next blocks.
- name: Check the presence of claim.json
  stat:
    path: "{{ tnf_logs_location }}/claim.json"
  register: claim_json_present

# This is just for v4.3.0, where tar.gz containing all the files for the HTML report was not
# created, so we do it manually.
# We separate this tasks from the others due to three reasons:
# - The destination directory is different, initially.
# - If the job was not launched properly, Javascript files are not generated, so that the third
# task in this block would fail.
# - When removing backwards compatibility, it would be as simple as removing this block.
- name: (tnf v4.3.0) Manually build the compressed file containing the HTML report
  block:
    - name: Set tnf_js_logs_location variable
      set_fact:
        tnf_js_logs_location: "{{ tnf_dir }}/script"

    - name: Copy Javascript files in an auxiliary folder before compressing them with HTML report
      copy:
        src: "{{ item }}"
        dest: "{{ tnf_js_logs_location }}"
      with_fileglob:
        - "{{ tnf_logs_location }}/*.js"

    - name: Compress HTML results web page to upload it to DCI
      archive:
        path:
          - "{{ tnf_js_logs_location }}/classification.js"
          - "{{ tnf_js_logs_location }}/claimjson.js"
          - "{{ tnf_js_logs_location }}/results-embed.html"
          - "{{ tnf_js_logs_location }}/results.html"
        dest: "{{ job_logs.path }}/tnf-results-web-page.tar.gz"
  when:
    - test_network_function_version is version("v4.3.0", "==")
    - claim_json_present.stat.exists|bool

# This must be done after executing tnf, since tnf logs allows us to retrieve the commit SHA from
# cnf-certification-test repo in which the image is based, so that we can compare it with the one
# extracted from the cloned repo.
# Make the job to fail if the commit SHA is not found in the proper place in the logs, and if
# this feature is enabled (disabled by default).
# This check can only be done if CNF Cert was executed correctly (so claim.json file exists).
- name: Confirm we are testing the correct CNF Cert code
  lineinfile:
    path: "{{ tnf_logs_location }}/dci-tnf-execution.log"
    regex: '.*\(\ {{ tnf_commit_sha }}\ \)'
    state: absent
  changed_when: false
  check_mode: true
  register: commit_check
  failed_when: commit_check.found != 1
  when:
    - claim_json_present.stat.exists|bool
    - tnf_commit_sha is defined
    - tnf_check_commit_sha|bool
...
