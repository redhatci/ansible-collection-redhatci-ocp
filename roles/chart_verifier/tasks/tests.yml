---
- name: "Assert the chart has the required parameters"
  ansible.builtin.assert:
    that:
      - chart.chart_file is defined
    fail_msg: "The chart_file parameter is missing"
    success_msg: "All chart required parameters are defined"

- name: "Check if chart.values_file is iterable"
  assert:
    that:
      - chart.values_file | type_debug == "list"
      - chart.values_file is iterable
    fail_msg: "The chart.values_file must be a list"
  when:
    - chart.values_file is defined

- name: "Set chart location"
  ansible.builtin.set_fact:
    chart_location: "{{ chart.chart_file.startswith('http') | ternary('remote', 'local') }}"

- name: "Create working directory"
  ansible.builtin.tempfile:
    state: directory
  register: tmp_dir

- name: "Set working directory path"
  ansible.builtin.set_fact:
    work_chart_dir: "{{ tmp_dir.path }}"

- name: "Process remote chart artifacts for {{ chart.chart_file }}"
  when:
    - chart_location == "remote"
  block:
    - name: "Check if the chart file exists"
      ansible.builtin.uri:
        url: "{{ chart.chart_file }}"
      register: file_response
      ignore_errors: true
      run_once: true

    - name: "Chart file cannot be downloaded"
      ansible.builtin.fail:
        msg: "chart_file cannot be downloaded - {{ chart.chart_file }}"
      when:
        - file_response.status | int != 200

    - name: "Download chart file"
      ansible.builtin.get_url:
        url: "{{ chart.chart_file }}"
        dest: "{{ work_chart_dir }}/"
        mode: "0644"

    - name: "Check if chart.values_file exist"
      ansible.builtin.uri:
        url: "{{ item }}"
        return_content: true
      loop: "{{ chart.values_file }}"
      register: url_stats
      when:
        - chart.values_file is defined

    - name: "Fail if any of the values file is missing"
      ansible.builtin.fail:
        msg: "File {{ item.item }} does not exist."
      loop: "{{ file_stats.results }}"
      when:
        - chart.values_file is defined
        - values_response is defined
        - values_response.status | int != 200

    - name: "Download values_file to working directory"
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ work_chart_dir }}/"
        mode: "0644"
      loop: "{{ chart.values_file }}"
      when:
        - chart.values_file is defined

- name: "Process local chart artifacts for {{ chart.chart_file }}"
  when:
    - chart_location == "local"
  block:
    - name: "Check chart_file stat"
      ansible.builtin.stat:
        path: "{{ chart.chart_file }}"
      register: chart_stat

    - name: "Chart file path not found"
      ansible.builtin.fail:
        msg: "chart_file cannot be found - {{ chart.chart_file }}"
      when:
        - not chart_stat.stat.exists

    - name: "Copy chart_file to working directory"
      ansible.builtin.copy:
        mode: "0644"
        src: "{{ chart.chart_file }}"
        dest: "{{ work_chart_dir }}/"
      when:
        - chart_stat is defined
        - chart_stat.stat.exists

    - name: "Check if chart.values_file exist"
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ chart.values_file }}"
      register: file_stats
      when:
        - chart.values_file is defined

    - name: "Fail if any values file is missing"
      ansible.builtin.fail:
        msg: "File {{ item.item }} does not exist."
      loop: "{{ file_stats.results }}"
      when:
        - chart.values_file is defined
        - not item.stat.exists

    - name: "Copy values_file to working directory"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ work_chart_dir }}/"
        mode: "0644"
      loop: "{{ chart.values_file }}"
      when:
        - chart.values_file is defined

- name: "Run chart show to get chart details"
  ansible.builtin.shell:
    cmd: >
      {{ helm_tool_path }} show chart {{ work_chart_dir }}/{{ chart.chart_file | basename }} |
      {{ yq_tool_path }} e -o json -
  register: chart_show

- name: "Set charts details"
  vars:
    chart_info: "{{ chart_show.stdout | from_json }}"
  ansible.builtin.set_fact:
    chart_name: "{{ chart_info.name }}"
    chart_version: "{{ chart_info.version }}"
    chart_description: "{{ chart_info.description }}"

- name: "Running Chart Verifier"
  ansible.builtin.shell:
    cmd: >
      podman run --rm
      -e KUBECONFIG=/kubeconfig
      -v {{ kubeconfig_path }}:/kubeconfig:Z
      -v {{ work_chart_dir }}:/app/chartverifier:Z
      {{ chart_verifier_image }}
      verify --set profile.vendorType=partner
      {%- if chart.values_file is defined %}
        {%- for vf in chart.values_file %}
        -F /app/chartverifier/{{ vf | basename }}
        {%- endfor %}
      {%- endif %}
      {% if chart.deploy_chart is defined and chart.deploy_chart is sameas false %}
      --disable chart-testing
      {% endif %}
      {% if chart.flags is defined %}{{ chart.flags }}{% endif %}
      --openshift-version {{ ocp_version_full }}
      /app/chartverifier/{{ chart.chart_file | basename }}
      --write-to-file
  args:
    chdir: "{{ work_chart_dir }}"
  ignore_errors: true

- name: "Copy the report to the Job's log_dir"
  ansible.builtin.copy:
    mode: "0644"
    src: "{{ work_chart_dir }}/report.yaml"
    dest: "{{ logs_dir }}/{{ chart_name }}_{{ index }}_report.yaml"
    remote_src: true
  delegate_to: localhost

- name: "Validate all tests have passed"
  ansible.builtin.shell:
    cmd: >
      grep -c FAIL <( {{ yq_tool_path }} e "..|.outcome? | select(.)" report.yaml )
  register: cv_fail_count
  args:
    chdir: "{{ work_chart_dir }}"
    executable: /bin/bash
  failed_when: "cv_fail_count.rc not in [ 0, 1 ]"

- name: "Submit CV and create pull request"
  ansible.builtin.include_role:
    name: redhatci.ocp.create_pr
  vars:
    product_name: "{{ chart_name }}"
    product_type: "helmchart"
    product_version: "{{ chart_version }}"
    fork_name: "charts-{{ chart_name }}-{{ chart_version }}-{{ ansible_date_time.iso8601_basic_short }}"
    work_dir: "{{ work_chart_dir }}"
    publish_chart: "{{ chart.flags |default('', True) is not search('-W') }}"
  when:
    - chart.create_pr | default(false) | bool
    - cv_fail_count.stdout | int == 0

- name: "Get PR submission details"
  ansible.builtin.debug:
    msg: "{{ pr_details.stdout_lines[2] }}"
  when:
    - pr_details is defined
    - pr_details.rc == 0
  notify:
    - "helm-chart-verifier cleanup"
...
