---
- name: "Fail if both create_operator_project and pyxis_operator_identifier are provided for {{ operator.name }}"
  fail:
    msg: |
      If you want to reuse the existing cert project, provide its ID pyxis_operator_identifier.
      If you want to create a new cert project for operator, set create_operator_project to true.
      Doing both at once makes your intentions unclear.
  when:
    - operator.create_operator_project | default(false) | bool
    - operator.pyxis_operator_identifier | default('') | length > 0

- name: Create temporary (operator) preflight artifacts directory
  tempfile:
    state: directory
    prefix: preflight_operator_artifacts.
  register: preflight_operator_artifacts

# We have to set index image only in the case of connected environment.
# In disconnected environment, index image is generated by opm
# and stored in the private registry on tests stage.
- name: Set operator index image in connected environment
  set_fact:
    OO_INDEX: "{{ operator.index_image }}"
  when: not dci_disconnected | default(false) | bool

- name: Create preflight namespace
  community.kubernetes.k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ preflight_namespace }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: "baseline"
          pod-security.kubernetes.io/warn: "baseline"

- name: "Create namespace for {{ operator.name }}"
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ operator.name }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/enforce-version: latest
    wait: yes
  when:
    - '"github-867" in dci_workarounds|default([])'

- name: "Run preflight check operator tests for {{ operator.name }}"
  environment:
    - OPENSHIFT_AUTH: "{{ partner_creds }}"
    - OO_BUNDLE: "{{ operator.bundle_image }}"
    - OO_INDEX: "{{ OO_INDEX }}"
  shell: >
    podman run
    --rm
    --privileged
    --security-opt=label=disable
    -e PFLT_JUNIT=true
    -e PFLT_ARTIFACTS=/artifacts
    -e PFLT_LOGFILE=/artifacts/preflight.log
    -e PFLT_LOGLEVEL=trace
    -e DOCKER_CONFIG=/opt
    {{ preflight_PFLT_dockerconfig | default('') }}
    -e KUBECONFIG=/kubeconfig
    -e PFLT_INDEXIMAGE={{ OO_INDEX }}
    -e PFLT_NAMESPACE={{ preflight_namespace }}
    -e PFLT_SERVICEACCOUNT={{ preflight_sa }}
    -e PFLT_SCORECARD_IMAGE={{ preflight_assets_images[0] }}
    -v {{ preflight_tmp_dir.path }}/kubeconfig:/kubeconfig
    -v {{ preflight_operator_artifacts.path }}:/artifacts
    {{ preflight_podman_auth | default('') }}
    {{ preflight_podman_ca }}
    {{ preflight_image }}
    check operator
    {{ operator.bundle_image }}
  async: 600
  poll: 0
  register: preflight_exec

- name: "Retrieve async logs for {{ operator.name }}"
  include_tasks: test_async_logs_check_operator.yml
  ignore_errors: true

- name: Check on preflight execution
  async_status:
    jid: "{{ preflight_exec.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 20
  delay: 30
  ignore_errors: true

- name: Upload logs for preflight check operator into DCI
  vars:
    preflight_prefix: "preflight_operator_{{ operator.name }}_{{ operator.version }}"
  copy:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}/{{ preflight_prefix }}_{{ item | basename }}"
  with_fileglob:
    - "{{ preflight_operator_artifacts.path }}/*"

- name: Delete preflight namespace
  community.kubernetes.k8s:
    name: "{{ preflight_namespace }}"
    api_version: v1
    kind: Namespace
    state: absent

- block:
    - name: Wait for namespace to be destroyed
      community.kubernetes.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ preflight_namespace }}"
      register: preflight_namespace_presence
      until: preflight_namespace_presence.resources | length == 0
      retries: 30
      delay: 20
  rescue:
    - name: Print hanging resources
      shell: "{{ oc_tool_path }} get all -n {{ preflight_namespace }}"

    - name: Impossible to destroy namespace
      fail:
        msg: "Impossible to destroy namespace {{ preflight_namespace }}"

- name: Check the presence of junit file with test results
  vars:
    preflight_junit: "{{ job_logs.path }}/preflight_operator_{{ operator.name }}_{{ operator.version }}_results-junit.xml"
  stat:
    path: "{{ preflight_junit }}"
  register: preflight_junit_exists

- name: Fail if junit file is absent
  vars:
    preflight_junit: "{{ job_logs.path }}/preflight_operator_{{ operator.name }}_{{ operator.version }}_results-junit.xml"
  fail:
    msg: "results-junit file is absent, it seems like the tests failed: {{ preflight_junit }}"
  when: not preflight_junit_exists.stat.exists

- name: "Create certification project for {{ operator.name }}"
  include_role:
    name: create-certification-project
  vars:
    project_type: "operator"
  when:
    - operator.create_operator_project | default(false) | bool
    - operator.pyxis_operator_identifier | default('') | length == 0

- name: Set cert_project_id if pyxis_operator_identifier is defined
  set_fact:
    cert_project_id: "{{ operator.pyxis_operator_identifier }}"
  when: operator.pyxis_operator_identifier | default('') | length > 0

- name: "Submit the results to Pyxis for {{ operator.name }}"
  include_role:
    name: pyxis
  when: cert_project_id | default('') | length > 0

- name: Create certification PR
  block:
    - name: Set target repository
      set_fact:
        target_repository: "{{ sandbox_repository | default('redhat-openshift-ecosystem/certified-operators') }}"

    - name: Create a PR for certification
      include_role:
        name: create-pr
        apply:
          environment:
            - DOCKER_CONFIG: "{{ preflight_tmp_dir.path }}"
      vars:
        product_name: "{{ operator.name }}"
        product_version: "{{ operator.version }}"
        fork_name: "certified-operator-{{ operator.name }}-{{ operator.version }}"
        work_dir: "{{ preflight_operator_artifacts.path }}"
  when: operator.create_pr | default(false) | bool

- name: Unset project ID to ensure no occasionnal reuse
  set_fact:
    cert_project_id: ""

- name: Remove tmp dir
  file:
    path: "{{ preflight_operator_artifacts.path }}"
    state: absent
...
