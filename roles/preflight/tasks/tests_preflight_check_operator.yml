---
- name: "Fail if submission setup is inconsistent for {{ operator.name }}"
  ansible.builtin.fail:
    msg: |
      If you want to reuse the existing cert project, provide its ID pyxis_operator_identifier.
      If you want to create a new cert project for operator, set create_operator_project to true.
      Doing both at once makes your intentions unclear.
  when:
    - operator.create_operator_project | default(false) | bool
    - operator.pyxis_operator_identifier | default('') | length > 0

- name: Create temporary (operator) preflight artifacts directory
  ansible.builtin.tempfile:
    state: directory
    prefix: preflight_operator_artifacts.
  register: preflight_operator_artifacts

# We have to set index image only in the case of connected environment.
# In disconnected environment, index image is generated by opm
# and stored in the private registry.
- name: Set operator index image in connected environment
  ansible.builtin.set_fact:
    oo_index: "{{ operator.index_image }}"
  when: not dci_disconnected | default(false) | bool

- name: Create preflight namespace
  community.kubernetes.k8s:
    state: present
    definition:
      api_version: v1
      kind: Namespace
      metadata:
        name: "{{ preflight_namespace }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: "baseline"
          pod-security.kubernetes.io/warn: "baseline"

- name: "Create namespace for {{ operator.name }}"
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ operator.name }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/enforce-version: latest
    wait: true
  when:
    - '"github-867" in dci_workarounds|default([])'

- name: "Run preflight check operator on {{ operator.name }}"
  environment:
    OPENSHIFT_AUTH: "{{ partner_creds }}"
    OO_BUNDLE: "{{ operator.bundle_image }}"
    OO_INDEX: "{{ oo_index }}"
  ansible.builtin.shell: >
    podman run
    --rm
    --privileged
    --security-opt=label=disable
    -e PFLT_JUNIT=true
    -e PFLT_ARTIFACTS=/artifacts
    -e PFLT_LOGFILE=/artifacts/preflight.log
    -e PFLT_LOGLEVEL=trace
    {% if partner_creds | length %}
    -e PFLT_DOCKERCONFIG=/opt/config.json
    {% endif %}
    -e KUBECONFIG=/kubeconfig
    -e PFLT_INDEXIMAGE={{ oo_index }}
    -e PFLT_NAMESPACE={{ preflight_namespace }}
    -e PFLT_SERVICEACCOUNT={{ preflight_sa }}
    {% if preflight_assets_images | default('') | length %}
    -e PFLT_SCORECARD_IMAGE={{ preflight_assets_images[0] }}
    {% endif %}
    -v {{ preflight_tmp_dir.path }}/kubeconfig:/kubeconfig
    -v {{ preflight_operator_artifacts.path }}:/artifacts
    {% if partner_creds | length %}
    -v {{ preflight_tmp_dir.path }}/config.json:/opt/config.json
    {% endif %}
    {{ preflight_podman_ca }}
    {{ preflight_image }}
    check operator
    {{ operator.bundle_image }}
  async: 600
  poll: 0
  register: preflight_exec

- name: "Retrieve async logs for {{ operator.name }}"
  ansible.builtin.include_tasks: test_async_logs_check_operator.yml
  ignore_errors: true

- name: Check on preflight execution
  ansible.builtin.async_status:
    jid: "{{ preflight_exec.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 20
  delay: 30
  ignore_errors: true

- name: Check cleanup
  ansible.builtin.async_status:
    jid: "{{ preflight_exec.ansible_job_id }}"
    mode: cleanup

- name: Get preflight log files
  ansible.builtin.find:
    paths: "{{ preflight_operator_artifacts.path }}"
  register: _preflight_operator_artifacts_logs

- name: Upload logs for preflight check operator into DCI
  vars:
    preflight_prefix: "preflight_operator_{{ operator.name }}"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}/{{ preflight_prefix }}_{{ item | basename }}"
    mode: "0644"
    remote_src: true
  loop: "{{ _preflight_operator_artifacts_logs | json_query('files[*].path') }}"

- name: Validate annotations.yaml
  ansible.builtin.include_tasks: test_validate_annotations.yml
  when: validate_annotations_yaml | default(true) | bool

- name: Cleanup
  block:
    - name: Delete preflight namespace
      community.kubernetes.k8s:
        name: "{{ preflight_namespace }}"
        api_version: v1
        kind: Namespace
        state: absent

    - name: Wait for namespace to be destroyed
      community.kubernetes.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ preflight_namespace }}"
      register: preflight_namespace_presence
      until: preflight_namespace_presence.resources | length == 0
      retries: 30
      delay: 20
  rescue:
    - name: Print hanging resources
      ansible.builtin.command: "{{ oc_tool_path }} get all -n {{ preflight_namespace }}"

    - name: Impossible to destroy namespace
      ansible.builtin.fail:
        msg: "Impossible to destroy namespace {{ preflight_namespace }}"

- name: Check the presence of junit file with test results
  vars:
    preflight_junit: "{{ job_logs.path }}/preflight_operator_{{ operator.name }}_results-junit.xml"
  ansible.builtin.stat:
    path: "{{ preflight_junit }}"
  register: preflight_junit_exists

- name: Fail if junit file is absent
  vars:
    preflight_junit: "{{ job_logs.path }}/preflight_operator_{{ operator.name }}_results-junit.xml"
  ansible.builtin.fail:
    msg: "results-junit file is absent, it seems like the tests failed: {{ preflight_junit }}"
  when: not preflight_junit_exists.stat.exists

- name: Update existing operator project using cert_settings
  ansible.builtin.include_role:
    name: redhatci.ocp.create_certification_project
    tasks_from: update_project.yml
  vars:
    product_type: "operator"
  when:
    - cert_settings is defined
    - cert_project_id | default('') | length

- name: "Create certification project for {{ operator.name }}"
  ansible.builtin.include_role:
    name: redhatci.ocp.create_certification_project
  vars:
    product_type: "operator"
  when:
    - operator.create_operator_project | default(false) | bool
    - operator.pyxis_operator_identifier | default('') | length == 0

- name: Set cert_project_id if pyxis_operator_identifier is defined
  ansible.builtin.set_fact:
    cert_project_id: "{{ operator.pyxis_operator_identifier }}"
  when: operator.pyxis_operator_identifier | default('') | length > 0

- name: "Submit the results to Pyxis for {{ operator.name }}"
  ansible.builtin.include_role:
    name: redhatci.ocp.pyxis
  when: cert_project_id | default('') | length > 0

- name: Create a PR for certification
  ansible.builtin.include_role:
    name: redhatci.ocp.create_pr
    apply:
      environment:
        DOCKER_CONFIG: "{{ preflight_tmp_dir.path }}"
  vars:
    product_name: "{{ operator.name }}"
    product_type: "operator"
    product_version: "{{ operator.version }}"
    fork_name: "certified-operator-{{ operator.name }}-{{ operator.version }}"
    work_dir: "{{ preflight_operator_artifacts.path }}"
    target_repository: "{{ sandbox_repository | default('redhat-openshift-ecosystem/certified-operators') }}"
  when: operator.create_pr | default(false) | bool

- name: Unset project ID to ensure no occasional reuse
  ansible.builtin.set_fact:
    cert_project_id: ""

- name: Remove tmp dir
  ansible.builtin.file:
    path: "{{ preflight_operator_artifacts.path }}"
    state: absent
...
