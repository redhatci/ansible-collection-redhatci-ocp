---
- name: Check if container has already been certified
  ansible.builtin.include_tasks: test_check_if_container_certified.yml
  when: not preflight_test_certified_image
  ignore_errors: true

- name: "Non-certified image or force test run for {{ current_operator_image }}"
  when: not (already_certified | default(false) | bool)
  block:
    - name: "Validate parameters for check container run on {{ current_operator_image }}"
      ansible.builtin.assert:
        that:
          - operator.name is defined
          - operator.version is defined
        fail_msg: "Cannot run preflight check container: automatically generated config is missing"
        success_msg: "All required parameters are ok, proceeding to run preflight check container"

    - name: Dump operator parameters for the debug
      ansible.builtin.debug:
        msg: |
          operator.name = {{ operator.name }}
          operator.version = {{ operator.version }}

    - name: "Fail if submission setup is not consistent for {{ current_operator_image }}"
      ansible.builtin.fail:
        msg: |
          operator.create_container_project: {{ operator.create_container_project }}
          operator.pyxis_container_identifier: {{ operator.pyxis_container_identifier }}
          If you want to reuse the existing cert project, provide its ID pyxis_container_identifier.
          If you want to create a new cert project for container, set create_container_project to true.
          Doing both at once makes your intentions unclear.
      when:
        - operator.create_container_project | default(false) | bool
        - operator.pyxis_container_identifier | default('') | length

    - name: Create temporary (container) preflight artifacts directory
      ansible.builtin.tempfile:
        state: directory
        prefix: preflight_container_artifacts.
      register: preflight_container_artifacts

    - name: Set cert_project_id if cert project is already here
      ansible.builtin.set_fact:
        cert_project_id: "{{ operator.pyxis_container_identifier }}"
      when: operator.pyxis_container_identifier | default('') | length

    - name: Update existing container project using cert_settings
      ansible.builtin.include_role:
        name: redhatci.ocp.create_certification_project
        tasks_from: update_project.yml
      vars:
        product_type: "container"
        cert_item: "{{ operator }}"
      when:
        - cert_settings is defined
        - cert_project_id | default('') | length

    - name: "Create certification project for {{ current_operator_image }}"
      ansible.builtin.include_role:
        name: redhatci.ocp.create_certification_project
      vars:
        product_type: "container"
        cert_item: "{{ operator }}"
      when:
        - operator.create_container_project | default(false) | bool
        - operator.pyxis_container_identifier | default('') | length == 0

    - name: Run preflight check
      block:
        - name: "Run preflight check container on {{ current_operator_image }}"
          ansible.builtin.command: >
            podman run
            --rm
            --privileged
            -e PFLT_JUNIT=true
            {% if (cert_project_id | default('') | length) == 0 %}
            -e PFLT_LOGLEVEL=trace
            {% endif %}
            -e PFLT_ARTIFACTS=/artifacts
            -e PFLT_LOGFILE=/artifacts/preflight.log
            {% if partner_creds | length %}
            -e PFLT_DOCKERCONFIG=/opt/config.json
            {% endif %}
            {% if cert_project_id | default('') | length %}
            -e PFLT_PYXIS_API_TOKEN={{ lookup('file', pyxis_apikey_path) }}
            -e PFLT_CERTIFICATION_COMPONENT_ID={{ cert_project_id }}
            {% endif %}
            -v {{ preflight_container_artifacts.path }}:/artifacts
            {% if partner_creds | length %}
            -v {{ preflight_tmp_dir.path }}/config.json:/opt/config.json
            {% endif %}
            {{ preflight_podman_ca }}
            {{ preflight_image }}
            check container
            {{ current_operator_image }}
            {% if cert_project_id | default('') | length and preflight_dci_all_components_are_ga | default(True) %}
            --submit
            {% endif %}
      rescue:
        - name: Do not fail when preflight check container throws an error
          ansible.builtin.debug:
            msg: "Do not fail when preflight check container throws an error"
      always:
        - name: Unset pyxis auth to not reuse by following containers
          ansible.builtin.set_fact:
            cert_project_id: ""

        - name: "Run health check on {{ current_operator_image }}"
          ansible.builtin.include_tasks: test_run_health_check.yml
          when: preflight_run_health_check | bool

        - name: "Copy execution artifacts for {{ current_operator_image }}"
          vars:
            image_name: "{{ current_operator_image | regex_search('.*/([^@:]+).*$', '\\1') | join('') }}"
            preflight_prefix: "preflight_container_{{ operator.name }}_{{ image_name }}"
          ansible.builtin.copy:
            src: "{{ item.src }}"
            dest: "{{ job_logs.path }}/{{ preflight_prefix }}_{{ item.path | regex_replace('/', '_') }}"
            mode: "0644"
          with_filetree:  # noqa: schema[moves]
            - "{{ preflight_container_artifacts.path }}"
          when:
            - item.state == "file"

        - name: Remove tmp dir
          ansible.builtin.file:
            path: "{{ preflight_container_artifacts.path }}"
            state: absent
...
