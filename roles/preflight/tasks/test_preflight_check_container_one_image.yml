---
- name: Check if container has already been certified
  include_tasks: test_check_if_container_certified.yml
  when: not preflight_test_certified_image

- name: "Non-certified image or force test run for {{ current_operator_image }}"
  block:
    - name: "Validate parameters for check container run on {{ current_operator_image }}"
      assert:
        that:
          - operator.name is defined
          - operator.version is defined
        fail_msg: "Cannot run preflight check container: automatically generated config is missing"
        success_msg: "All required parameters are ok, proceeding to run preflight check container"

    - name: "Fail if both create_container_project and pyxis_container_identifier are provided for {{ current_operator_image }}"
      fail:
        msg: |
          If you want to reuse the existing cert project, provide its ID pyxis_container_identifier.
          If you want to create a new cert project for container, set create_container_project to true.
          Doing both at once makes your intentions unclear.
      when:
        - operator.create_container_project | default(false) | bool
        - operator.pyxis_container_identifier | default('') | length

    - name: Create temporary (container) preflight artifacts directory
      tempfile:
        state: directory
        prefix: preflight_container_artifacts.
      register: preflight_container_artifacts

    - name: Set cert_project_id if cert project is already here
      set_fact:
        cert_project_id: "{{ operator.pyxis_container_identifier }}"
      when: operator.pyxis_container_identifier | default('') | length

    - name: "Create certification project for {{ current_operator_image }}"
      include_role:
        name: create-certification-project
      vars:
        project_type: "container"
      when:
        - operator.create_container_project | default(false) | bool
        - operator.pyxis_container_identifier | default('') | length == 0

    - block:
        - name: "Run preflight check container on operator image {{ current_operator_image }} with podman"
          shell: >
            podman run
            --rm
            --privileged
            -e PFLT_JUNIT=true
            -e PFLT_LOGLEVEL=trace
            -e PFLT_ARTIFACTS=/artifacts
            -e PFLT_LOGFILE=/artifacts/preflight.log
            {% if partner_creds | length %}
            -e PFLT_DOCKERCONFIG=/opt/config.json
            {% endif %}
            {% if cert_project_id | default('') | length %}
            -e PFLT_PYXIS_API_TOKEN={{ lookup('file', pyxis_apikey_path) }}
            -e PFLT_CERTIFICATION_PROJECT_ID={{ cert_project_id }}
            {% endif %}
            -v {{ preflight_container_artifacts.path }}:/artifacts
            {% if partner_creds | length %}
            -v {{ preflight_tmp_dir.path }}/config.json:/opt/config.json
            {% endif %}
            {{ preflight_podman_ca }}
            {{ preflight_image }}
            check container
            {{ current_operator_image }}
            {% if cert_project_id | default('') | length %}
            --submit
            {% endif %}
      rescue:
        - name: Do not fail when preflight check container throws an error
          debug:
            msg: "Do not fail when preflight check container throws an error"
      always:
        - name: Unset pyxis auth to not reuse by following containers
          set_fact:
            cert_project_id: ""

        - name: "Run health check on {{ current_operator_image }}"
          include_tasks: test_run_health_check.yml
          when: preflight_run_health_check | bool

        - name: "Copy execution artifacts of {{ current_operator_image }} to DCI logs directory"
          vars:
            image_name: "{{ current_operator_image | regex_search('.*/([^@:]+).*$', '\\1') | join('') }}"
            preflight_prefix: "preflight_container_{{ operator.name }}_{{ image_name }}"
          copy:
            src: "{{ item.src }}"
            dest: "{{ job_logs.path }}/{{ preflight_prefix }}_{{ item.path | regex_replace('/', '_') }}"
          with_filetree:
            - "{{ preflight_container_artifacts.path }}"
          when:
            -  item.state == "file"

        - name: Remove tmp dir
          file:
            path: "{{ preflight_container_artifacts.path }}"
            state: absent
  when: not (already_certified | default(false) | bool)
...
