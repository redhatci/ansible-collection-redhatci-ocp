---
- name: Setup tmp scorecard folders
  block:
    - name: Create temporary scorecard directory
      tempfile:
        state: directory
        prefix: scorecard_tmp_dir.
      register: scorecard_tmp_dir

    - name: Set directories for artifacts and operator bundle extract
      set_fact:
        scorecard_artifacts: "{{ scorecard_tmp_dir.path }}/artifacts"
        scorecard_operator_dir: "{{ scorecard_tmp_dir.path }}/scorecard_operator_dir"

    - name: Create directories for artifacts and operator bundle extract
      file:
        path: "{{ scorecard_dir_to_create }}"
        state: directory
        mode: 0744
      loop:
        - "{{ scorecard_artifacts }}"
        - "{{ scorecard_operator_dir }}"
      loop_control:
        loop_var: scorecard_dir_to_create

- name: Extract bundle
  block:
    - name: Extract bundle and add read permissions
      shell:
        cmd: |
          oc image extract {{ operator.image }} --confirm -a {{ all_registries_creds }}
          chmod -R go+r ./
        chdir: "{{ scorecard_operator_dir }}"

    - name: Print extracted operator data
      shell: |
        tree "{{ scorecard_operator_dir }}"
      ignore_errors: true

- name: Retrieve operator index image in the connected environment
  set_fact:
    OO_INDEX: "{{ operator.index_image }}"

- name: Manage operator index image, which is containerized version of the catalog
  block:
    - name: Set tag for the index image
      set_fact:
        OO_INDEX: "{{ '/'.join([ provisionhost_registry ] + operator.index_image.split('/')[1:]) }}"

    - name: Build index image in temporary scorecard directory
      shell:
        cmd: |
          opm index add --pull-tool podman \
          --bundles {{ operator.image }} \
          --tag {{ OO_INDEX }}
        chdir: "{{ scorecard_tmp_dir.path }}"

    - name: Push index image into local registry
      shell: |
        podman push \
        --authfile {{ all_registries_creds }} \
        {{ OO_INDEX }}
  when: dci_disconnected | default(false) | bool

- name: Manage imageContentSourcePolicy
  block:
    - name: Save catalog mirror to temporary scorecard directory
      shell: |
        oc adm catalog mirror -a {{ all_registries_creds }} \
        {{ OO_INDEX }} {{ provisionhost_registry }} --to-manifests={{ scorecard_tmp_dir.path }}/tmp_oc

    - name: Append to imageContentSourcePolicy
      blockinfile:
        block: |
          # Scorecard container
            - mirrors:
              - {{ provisionhost_registry }}/{{ '/'.join(item.split('@')[0].split('/')[1:]) }}
              source: {{ item.split('@')[0] }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.split('@')[0] }}"
        path: "{{ scorecard_tmp_dir.path }}/tmp_oc/imageContentSourcePolicy.yaml"
      loop: "{{ scorecard_images }}"

    - name: Apply Image Content Source Policy
      k8s:
        definition: "{{ lookup('file', scorecard_tmp_dir.path + '/tmp_oc/imageContentSourcePolicy.yaml') }}"

    - name: Delay for policy to apply, there is no nodes to reboot anymore since ocp-4.7
      pause:
        minutes: 1

    - name: Wait for updated machine configs to be applied on the nodes
      k8s_info:
        api_version: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
      register: reg_mcpool_status
      vars:
        status_query: "resources[*].status.conditions[?type=='Updated'].status"
        update_status: "{{ reg_mcpool_status | json_query(status_query) | flatten | unique }}"
      until:
        - update_status == ['True']
      retries: 60
      delay: 60
  when: dci_disconnected | default(false) | bool

- name: Template scorecard config
  template:
    src: templates/scorecard-test-config.yaml.j2
    dest: "{{ scorecard_artifacts }}/scorecard-test-config.yaml"

- name: Set path to scorecard config
  set_fact:
    scorecard_config_path: "{{ scorecard_artifacts }}/scorecard-test-config.yaml"

- name: Create scorecard-testing namespace
  k8s:
    name: scorecard-testing
    api_version: v1
    kind: Namespace
    state: present

- name: Run operator-sdk scorecard --selector=test=basic-check-spec-test
  environment:
    - OPENSHIFT_AUTH: "{{ all_registries_creds }}"
    - OO_BUNDLE: "{{ operator.image }}"
    - OO_INDEX: "{{ OO_INDEX }}"
    - ARTIFACT_DIR: "{{ scorecard_artifacts }}"
  shell: |
    {{ operator_sdk_tool_path }} scorecard \
    --output json \
    --selector=test=basic-check-spec-test \
    --kubeconfig "{{ kubeconfig_path }}" \
    --namespace scorecard-testing \
    --service-account default \
    --config {{ scorecard_config_path }} \
    --verbose \
    --wait-time 300s \
    "{{ scorecard_operator_dir }}"
  register: scorecard_exec
  ignore_errors: true

- name: Set prefix for scorecard output files
  set_fact:
    scorecard_prefix: "scorecard_{{ operator.image.split('@')[0].split('/')[-1] }}_{{ operator.index_image.split(':')[-1] }}"

- name: Copy scorecard basic-check-spec-test output into logs
  template:
    src: templates/scorecard-basic-check-spec-test.j2
    dest: "{{ job_logs.path }}/{{ scorecard_prefix }}_basic_check_spec_test.json"

- name: Run operator-sdk scorecard --selector=suite=olm
  environment:
    - OPENSHIFT_AUTH: "{{ all_registries_creds }}"
    - OO_BUNDLE: "{{ operator.image }}"
    - OO_INDEX: "{{ OO_INDEX }}"
    - ARTIFACT_DIR: "{{ scorecard_artifacts }}"
  shell: |
    {{ operator_sdk_tool_path }} scorecard \
    --output json \
    --selector=suite=olm \
    --kubeconfig "{{ kubeconfig_path }}" \
    --namespace scorecard-testing \
    --service-account default \
    --config {{ scorecard_config_path }} \
    --verbose \
    --wait-time 300s \
    "{{ scorecard_operator_dir }}"
  register: scorecard_exec
  ignore_errors: true

- name: Copy scorecard basic-check-spec-test output into logs
  template:
    src: templates/scorecard-basic-check-spec-test.j2
    dest: "{{ job_logs.path }}/{{ scorecard_prefix }}_suite_olm.json"

- name: Delete scorecard-testing namespace
  k8s:
    name: scorecard-testing
    api_version: v1
    kind: Namespace
    state: absent

- name: Remove tmp dir
  file:
    path: "{{ scorecard_tmp_dir.path }}"
    state: absent
...
