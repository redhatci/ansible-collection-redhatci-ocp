# Role to deploy an OLM-based operator
#
# Required arguments:
#   operator: Name of the operator to install
#   namespace: Namespace where the operator will be installed
#
# Optional arguments:
#   source: CatalogSource where to pull operator from (default: redhat-operators)
#   source_ns: Namespace where the CatalogSource is (default: openshift-marketplace)
#   operator_group_spec: OperatorGroupSpec is the spec for an OperatorGroup resource (default: {}, i.e make operator available in all namespaces)
#     Use: targetNamespaces: [] to define the list of namespaces where the operator should be targeting
#
---
- name: Assert all required fields are present
  assert:
    that:
      - operator | string
      - namespace | string
      - source | string

- name: Create Namespace for OLM operator
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
        labels: "{{ ns_labels | default(omit) }}"

- name: Create OperatorGroup for OLM operator
  community.kubernetes.k8s:
    definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: "{{ operator }}"
        namespace: "{{ namespace }}"
      spec: "{{ operator_group_spec | default(omit) }}"

- name: Create subscription for OLM operator
  community.kubernetes.k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ operator }}"
        namespace: "{{ namespace }}"
      spec:
        channel: "{{ channel | default(omit) }}"
        config:
          resources: {}
        name: "{{ operator }}"
        source: "{{ source }}"
        sourceNamespace: "{{ source_ns }}"

- name: Get operator's package manifest
  community.kubernetes.k8s_info:
    api: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: "{{ operator }}"
    namespace:  default
  register: packagemanifest
  retries: 5
  delay: 5
  until:
    - packagemanifest.resources | length == 1

- name: "Get operator's default channel name"
  vars:
    channels: "resources[*].status.defaultChannel"
  set_fact:
    default_channel: "{{ packagemanifest | json_query(channels) | join('') | string }}"

- name: "Get operator's CSV for desired channel"
  vars:
    current_csv: "resources[*].status.channels[? name=='{{ channel | default ( default_channel ) }}' ].currentCSV | [0]"
  set_fact:
    operator_csv: "{{ packagemanifest | json_query(current_csv) | first  }}"

- name: Wait (up to 10m) for operator's CSV to be ready
  community.kubernetes.k8s_info:
    api: operators.coreos.com/v1alpha1
    namespace: "{{ namespace }}"
    kind: ClusterServiceVersion
    name: "{{ operator_csv }}"
  register: csv
  retries: 20
  delay: 30
  until:
    - csv.resources | length == 1
    - "'status' in csv.resources[0]"
    - "'phase' in csv.resources[0].status"
    - csv.resources[0].status.phase == 'Succeeded' or csv.resources[0].status.phase == 'Present'
...
