---
- name: Check if directory exists
  ansible.builtin.stat:
    path: "{{ os_config_dir }}"
  register: path_check

- name: "Fail if the configs directory does not exist"
  ansible.builtin.fail:
    msg: "Configs directory does not exist"
  when: not path_check.stat.exists

- name: Generate Random passwords for users htpasswd IdP
  ansible.builtin.set_fact: # noqa: redhat-ci[no-role-prefix]
    admin_pass: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"
    cluster_admin_pass: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"
    nonadmin_pass: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"

- name: "Save passwords to the cluster configs directory"
  ansible.builtin.copy:
    content: |
      OCP automatically generated credentials for the API/GUI
      admin:{{ admin_pass }}
      cluster_admin:{{ cluster_admin_pass }}
      nonadmin:{{ nonadmin_pass }}
    dest: "{{ os_config_dir }}/ocp_creds.txt"
    mode: '0640'

- name: Create http auth file
  ansible.builtin.htpasswd:
    path: "{{ os_config_dir }}/users.htpasswd"
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    mode: "0640"
  loop:
    - user: admin
      password: "{{ admin_pass }}"
    - user: cluster_admin
      password: "{{ cluster_admin_pass }}"
    - user: nonadmin
      password: "{{ nonadmin_pass }}"

- name: "Encoding the password file"
  ansible.builtin.slurp:
    src: "{{ os_config_dir }}/users.htpasswd"
  register: encoded_password

- name: "Set htpasswd config secret in openshift"
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: htpass-secret
        namespace: openshift-config
      type: Opaque
      data:
        htpasswd: "{{ encoded_password.content }}"

- name: "Setup htpasswd auth IDP backend in openshift"
  community.kubernetes.k8s:
    definition:
      apiVersion: config.openshift.io/v1
      kind: OAuth
      metadata:
        name: cluster
      spec:
        identityProviders:
          - name: htpassidp
            challenge: true
            login: true
            mappingMethod: claim
            type: HTPasswd
            htpasswd:
              fileData:
                name: htpass-secret

- name: Grant cluster-admin permissions to cluster_admin user
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: cluster-admin-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
        - kind: User
          name: "cluster_admin"

- name: Grant admin permissions to admin user
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: admin-0
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
        - kind: User
          name: "admin"

- name: Add SSH keys to cluster nodes at day2
  when:
    - oc_ssh_extra_keys_paths is defined
    - oc_ssh_extra_keys_paths | length > 0
  block:
    - name: Check if SSH keys exist
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ oc_ssh_extra_keys_paths }}"
      register: _os_ssh_path

    - name: "Fail if any ssh path does not exist"
      ansible.builtin.fail:
        msg: "SSH public key {{ key.item }} file does not exist"
      when: not key.stat.exists
      loop: "{{ _os_ssh_path.results }}"
      loop_control:
        loop_var: key
        label: "{{ key.item }}"

    - name: Set SSH Keys manifests in master group
      vars:
        os_role: master
      community.kubernetes.k8s:
        state: present
        definition: "{{ lookup('template', '99_ssh_mc.yml.j2') }}"

    - name: Set SSH Keys manifests in worker group
      vars:
        os_role: worker
      community.kubernetes.k8s:
        state: present
        definition: "{{ lookup('template', '99_ssh_mc.yml.j2') }}"

    - name: Pause 60 seconds to wait for MC triggered by SSH pub key config
      ansible.builtin.pause:
        seconds: 60
      no_log: true

    - name: Wait for MCP status
      ansible.builtin.include_role:
        name: redhatci.ocp.check_resource
      vars:
        resource_to_check: "MachineConfigPool" # noqa: redhat-ci[no-role-prefix]
        check_wait_retries: 10 # noqa: redhat-ci[no-role-prefix]
        check_wait_delay: 30 # noqa: redhat-ci[no-role-prefix]
        check_reason: "SSH Key updates" # noqa: redhat-ci[no-role-prefix]
...
