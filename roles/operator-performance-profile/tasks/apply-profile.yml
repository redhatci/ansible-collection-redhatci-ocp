---
- name: Create PerformanceProfile
  k8s:
    definition: "{{ lookup('file', performance_definition) }}"
  register: profile_state
  retries: 5
  delay: 60
  until: profile_state is not failed
  when:
    - install_type is undefined or install_type != 'sno'

- name: Pause for Machine Config to be created
  pause:
    seconds: 60
  when:
    - profile_state is defined
    - profile_state.changed | bool

- name: "Applying PAO profile for SNO nodes and Wait for node to be available"
  block:
    - name: "Wait for Performance Addon Operator endpoint to become available"
      pause:
        seconds: 60

    - name: "Create PerformanceProfile on SNO node"
      k8s:
        definition: "{{ lookup('file', performance_definition) }}"
      register: sno_profile_state
      retries: 5
      delay: 60
      until: sno_profile_state is not failed

    - name: "Pause 60 seconds to wait for PAO profile triggers SNO reboot"
      pause:
        seconds: 60
      when:
        - sno_profile_state is defined
        - sno_profile_state.changed | bool

    - name: "Wait for API to be available"
      uri:
        url: 'https://api.{{ cluster }}.{{ domain }}:6443/readyz'
        validate_certs: no
        return_content: yes
      register: api_ready
      until:
        - "'ok' in api_ready.content"
        - api_ready.status == 200
      retries: 15
      delay: 60

    - name: "Wait for SNO node to be in Ready state"
      k8s_info:
        api: v1
        kind: Node
      register: cluster_nodes
      until:
         - cluster_nodes.resources is defined
         - "'True' in cluster_nodes.resources[0].status.conditions | to_json | from_json | json_query(query)"
      vars:
        query: "[?contains(type, 'Ready')].status"
      retries: 90
      delay: 10
  when:
    - install_type is defined
    - install_type == "sno"

- name: Wait for MCP status
  include_role:
    name: wait-mcp
  vars:
    mcp_wait_retries: 60
    mcp_wait_delay: 60
...
