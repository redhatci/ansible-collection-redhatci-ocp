---
# Most of the current partners do not use these settings.
## TODO: when endpoint be available in Pyxis we should retrieve the organization_id
## and not require it from cert_settings.
- name: Validate cert_settings.organization_id required to check for duplicate projects
  assert:
    that: "{{ item }} is defined"
    fail_msg: "The parameter {{ item }} is required to check for duplicate projects"
    success_msg: "All required parameters are ok, proceeding to check for duplicate projects"
  with_items:
    - cert_settings.organization_id

- name: Set container image facts
  set_fact:
    image_name: "{{ current_operator_image.split('@')[0].split(':')[0].split('/')[-1] }}"
    repo_name: "{{ current_operator_image.split('@')[0].split(':')[0].split('/')[1] }}"
    registry_name: "{{ current_operator_image.split('@')[0].split(':')[0].split('/')[0] }}"
    repository_name: "{{ current_operator_image.split('@')[0].split(':')[0].split('/')[1:] | join('/') }}"

- name: Get certification projects for the organization
  vars:
    pyxis_apikey: "{{ lookup('file', pyxis_apikey_path) }}"
  uri:
    url: "{{ verify_project_url }}/{{ cert_settings.organization_id }}/projects/certification?page_size=200&page=0"
    method: GET
    headers:
      X-API-KEY: "{{ pyxis_apikey }}"
    body_format: json
    status_code: 200
    timeout: 120
  register: cert_project_list_output
  retries: 20
  delay: 3
  until: not cert_project_list_output.failed
  no_log: true

- name: "Get certification projects information from the organization using image {{ image_name }} if exists"
  set_fact:
    cert_project_data: "{{ cert_project_list_output.json.data | json_query(query_data) }}"
  vars:
    query_data: "[?name == '{{ image_name }}']"
  no_log: true

- name: "Set fact if {{ image_name }} is already in an active certification project"
  set_fact:
    cert_project_exists_own_org: true
  loop: "{{ cert_project_data }}"
  loop_control:
    label: "{{ item._id }}"
  when:
    - cert_project_data != []
    - item.container.registry == registry_name
    - item.container.repository.split('/')[0] == repo_name
    - item.name == image_name
    - item.project_status == "active"
  no_log: true

- name: "Notify if image {{ image_name }} is already in an active certification project"
  debug:
    msg:
      - "Image {{ registry_name }}/{{ repo_name }}/{{ image_name }} is in process to get certify in another project of this organization"
      - "Review the following projects: {{ item._id }}"
      - "To continue archive the project or reach out to support to delete it."
  loop: "{{ cert_project_data }}"
  loop_control:
    label: "{{ item._id }}"
  when:
    - cert_project_exists_own_org | default(false) | bool
    - item.container.registry == registry_name
    - item.container.repository.split('/')[0] == repo_name
    - item.name == image_name
    - item.project_status == "active"

- name: Set project ID to reuse it later
  set_fact:
    cert_project_id: "{{ cert_project_data | json_query(query_data) | flatten | last }}"
  vars:
    query_data: "[?name == '{{ image_name }}']._id"
  when:
    - cert_project_exists_own_org | default(false) | bool
...
