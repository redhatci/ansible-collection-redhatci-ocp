---
- name: "Validate requirements"
  ansible.builtin.include_tasks: validation.yml

# Deploy Multicluster Hub. It will trigger the install of multicluster-engine
# operator
- name: "Deploy Multicluster Hub CR"
  vars:
    catalog_query: "resources[*].status.catalogSource"
    catalog_source: "{{ mce_packagemanifest | json_query(catalog_query) | join('') | string }}"  # noqa: jinja[invalid]
    me_annotation:
      channel: "{{ me_channel }}"
      installPlanApproval: "Automatic"
      name: "multicluster-engine"
      source: "{{ catalog_source }}"
      sourceNamespace: "openshift-marketplace"
      startingCSV: "{{ me_csv }}"
  kubernetes.core.k8s:
    definition:
      apiVersion: operator.open-cluster-management.io/v1
      kind: MultiClusterHub
      metadata:
        name: "{{ hub_instance }}"
        namespace: "{{ hub_namespace }}"
      spec:
        availabilityConfig: "{{ hub_availability }}"
        disableHubSelfManagement: "{{ hub_disable_selfmanagement }}"

- name: "Wait for search-postgres deployment"
  kubernetes.core.k8s_info:
    kind: Deployment
    namespace: "{{ hub_namespace }}"
    name: search-postgres
  register: deployment_info
  until:
    - deployment_info is defined
    - deployment_info.resources is defined
    - deployment_info.resources | length > 0
  retries: 180
  delay: 10

- name: "Configure hugepages on postgres containers"
  when:
    - has_hugepages | default(false) | bool
    - has_defined_hugepage | default(false) | bool
  block:
    - name: "Annotate the Search Object"
      kubernetes.core.k8s:
        definition:
          kind: Search
          apiVersion: search.open-cluster-management.io/v1alpha1
          metadata:
            name: search-v2-operator
            namespace: "{{ hub_namespace }}"
            annotations:
              search-pause: "true"

    - name: "Patch postgres deployment"
      vars:
        dep_definition: |
          kind: Deployment
          apiVersion: apps/v1
          metadata:
            name: search-postgres
            namespace: "{{ hub_namespace }}"
          spec:
            template:
              metadata:
                labels:
                  app: search
                  component: search-v2-operator
                  name: search-postgres
              spec:
                containers:
                - name: search-postgres
                  resources:
                    limits:
                      {{ hub_hugepages_type }}: {{ hub_hugepages_size }}
      kubernetes.core.k8s:
        state: present
        definition: "{{ dep_definition }}"

- name: "Wait for ACM pods to be Running"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ hub_namespace }}"
  register: pod_list
  until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
  retries: 20
  delay: 15
  no_log: true

- name: "Wait up to 30 mins for MCH to be ready"
  kubernetes.core.k8s_info:
    api: operator.open-cluster-management.io/v1
    kind: MultiClusterHub
    name: "{{ hub_instance }}"
    namespace: "{{ hub_namespace }}"
  register: mch
  retries: 60
  delay: 30
  until:
    - mch.resources is defined
    - mch.resources | length == 1
    - "'status' in mch.resources[0]"
    - "'phase' in mch.resources[0].status"
    - mch.resources[0].status.phase == 'Running' or mch.resources[0].status.phase == 'Available'

- name: "Disable ClusterImageSets and AppSubs when disconnected"
  when:
    - hub_disconnected | bool
  block:
    - name: "Disable ClusterImageSet subscription"
      kubernetes.core.k8s:
        definition:
          apiVersion: operator.open-cluster-management.io/v1
          kind: MultiClusterHub
          metadata:
            name: multiclusterhub
            namespace: "{{ hub_namespace }}"
          spec:
            disableUpdateClusterImageSets: true

    - name: "Delete AppSub to fast channel"
      kubernetes.core.k8s:
        api: apps.open-cluster-management.io/v1
        state: absent
        kind: Subscription
        name: hive-clusterimagesets-subscription-fast-0
        definition:
        namespace: "{{ hub_namespace }}"

    - name: "Get available ClusterImageSets"
      kubernetes.core.k8s_info:
        api_version: hive.openshift.io/v1
        kind: ClusterImageSet
      register: cis_list

    - name: "Delete all ClusterImageSets"
      vars:
        subs_details: "resources[*].{ app_subs_name: metadata.name }"
        app_subs: "{{ cis_list | json_query(subs_details) }}"
      kubernetes.core.k8s:
        api: hive.openshift.io/v1
        state: absent
        kind: ClusterImageSet
        name: "{{ sub.app_subs_name }}"
      loop: "{{ app_subs | default([]) | list }}"
      loop_control:
        loop_var: sub
        label: "{{ sub.app_subs_name }}"
      when:
        - cis_list is defined
        - cis_list | length

- name: "Enable feature gate for Central Infrastructure Management service"
  kubernetes.core.k8s:
    definition:
      apiVersion: hive.openshift.io/v1
      kind: HiveConfig
      metadata:
        name: hive
      spec:
        targetNamespace: hive
        logLevel: debug
        featureGates:
          custom:
            enabled:
              - AlphaAgentInstallStrategy
          featureSet: Custom

- name: "Wait for Hive pods to be Running"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "hive"
  register: pod_list
  until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
  retries: 20
  delay: 15
  no_log: true

- name: "Disable provisioning network and update to watch all Namespaces"
  kubernetes.core.k8s:
    definition:
      apiVersion: metal3.io/v1alpha1
      kind: Provisioning
      metadata:
        name: provisioning-configuration
      spec:
        provisioningDHCPRange: null
        provisioningIP: null
        provisioningNetworkCIDR: null
        provisioningNetwork: "Disabled"
        watchAllNamespaces: true

- name: "Get cluster version"
  kubernetes.core.k8s_info:
    api: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  register: cluster_version

- name: "Enable Hypershift if supported"
  vars:
    current_ver_query: "history[?state=='Completed'] | [0].version"
    full_ver: "{{ cluster_version.resources[0].status | json_query(current_ver_query) }}"  # noqa: jinja[invalid]
    current_ver: "{{ full_ver.split('-')[0] }}"
    ocp_version: "{{  current_ver }}"
  when:
    - ocp_version is version( hub_hypershift_supported , ">=")
  block:
    - name: "Enable Hypershift component"
      kubernetes.core.k8s:
        definition:
          apiVersion: multicluster.openshift.io/v1
          kind: MultiClusterEngine
          metadata:
            name: multiclusterengine
          spec:
            overrides:
              components:
                - enabled: true
                  name: hypershift-preview

    - name: "Enable hypershift Cluster-Addon"
      kubernetes.core.k8s:
        definition:
          apiVersion: addon.open-cluster-management.io/v1alpha1
          kind: ManagedClusterAddOn
          metadata:
            name: hypershift-addon
            namespace: local-cluster
          spec:
            installNamespace: open-cluster-management-agent-addon

    - name: "Enable Ingress Wildcards for Hosted Clusters subdomains"
      kubernetes.core.k8s:
        definition:
          apiVersion: operator.openshift.io/v1
          kind: IngressController
          metadata:
            name: default
            namespace: openshift-ingress-operator
          spec:
            routeAdmission:
              wildcardPolicy: WildcardsAllowed

- name: "Check the AgentServiceConfig instance"
  kubernetes.core.k8s_info:
    api: agent-install.openshift.io/v1beta1
    kind: AgentServiceConfig
    name: agent
    namespace: multicluster-engine
  register: _asg

- name: "Get Hub Cluster mirroring configuration"
  ansible.builtin.include_tasks: get-mirroring-config.yml
  when:
    - hub_disconnected | bool

- name: "Create the Agent Service config"
  when: _asg.resources | length == 0
  vars:
    agent_def: |
      apiVersion: agent-install.openshift.io/v1beta1
      kind: AgentServiceConfig
      metadata:
        name: agent
        namespace: multicluster-engine
      spec:
        databaseStorage:
      {% if hub_sc is defined %}
          storageClassName: {{ hub_sc }}
      {% endif %}
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: "{{ hub_db_volume_size }}"
        filesystemStorage:
      {% if hub_sc is defined %}
          storageClassName: {{ hub_sc }}
      {% endif %}
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: "{{ hub_fs_volume_size }}"
        imageStorage:
      {% if hub_sc is defined %}
          storageClassName: {{ hub_sc }}
      {% endif %}
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: "{{ hub_img_volume_size }}"
      {% if hub_os_images is defined %}
        osImages: {{ hub_os_images }}
      {% endif %}
      {% if hub_disconnected | bool %}
        mirrorRegistryRef:
            name: mirror-registry-config-map
      {% endif %}
  kubernetes.core.k8s:
    state: present
    definition: "{{ agent_def }}"

# In connected envs, it takes some time to generate the ISOs
# for multiple OCP versions and Architectures
- name: "Wait for assisted-image-service pods to be Running"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - "app=assisted-image-service"
    field_selectors:
      - status.phase=Running
    namespace: multicluster-engine
    wait: true
  register: pod_list
  until:
    - pod_list is defined
    - pod_list.resources is defined
    - pod_list.resources | length > 0
    - pod_list | json_query('resources[*].status.phase') | unique == ["Running"]
  retries: 100
  delay: 15

- name: "Wait for assisted-service pods to be Running"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - "app=assisted-service"
    field_selectors:
      - status.phase=Running
    namespace: multicluster-engine
    wait: true
  register: _pod_list
  until:
    - _pod_list is defined
    - _pod_list.resources is defined
    - _pod_list.resources | length > 0
    - _pod_list | json_query('resources[*].status.phase') | unique == ["Running"]
  retries: 20
  delay: 15
  no_log: true

- name: "Create an initial ClusterImageSet based on Hub release info"
  kubernetes.core.k8s:
    definition:
      apiVersion: hive.openshift.io/v1
      kind: ClusterImageSet
      metadata:
        labels:
          channel: "{{ cluster_version.resources[0].spec.channel }}"
          visible: 'true'
        name: "img-{{ cluster_version.resources[0].status.desired.version }}"
        namespace: open-cluster-management
      spec:
        releaseImage: "{{ cluster_version.resources[0].status.desired.image }}"
  when:
    - hub_disconnected | bool
...
