---
- name: "Get API request counts for a workload ns {{ da_ns }}"
  kubernetes.core.k8s_info:
    kind: APIRequestCount
    namespace: "{{ da_ns }}"
  register: deprecated_api_apirequestcount
  no_log: true

- name: "Extract deprecated and to-be-deprecated API for {{ da_ns }}"
  vars:
    query: >
      resources[?status.removedInRelease != null].{
        name: metadata.name,
        removedInRelease: status.removedInRelease,
        serviceAccounts: status.last24h[].byNode[].byUser[].username
      }
  ansible.builtin.set_fact:
    da_removed_api_dupes: "{{ deprecated_api_apirequestcount | json_query(query) }}"

- name: "Reset da_removed_api before processing new namespace {{ da_ns }}"
  ansible.builtin.set_fact:
    da_removed_api: []

- name: "Remove duplicates from serviceAccounts for {{ da_ns }}"
  ansible.builtin.set_fact:
    da_removed_api: >-
      {{
        da_removed_api +
        [{
          'name': item.name,
          'removedInRelease': item.removedInRelease,
          'serviceAccounts': item.serviceAccounts | unique
        }] | unique(attribute='name')
      }}
  loop: "{{ da_removed_api_dupes }}"

- name: "Display cleaned API data for {{ da_ns }}"
  ansible.builtin.debug:
    var: da_removed_api

- name: "Filter out openshift and kube related service accounts from OCP compatibility list for {{ da_ns }}"
  ansible.builtin.set_fact:
    da_removed_api: >-
      {{
        da_removed_api |
        selectattr('serviceAccounts', 'search', 'serviceaccount:') |
        selectattr('serviceAccounts', 'search', '^(?!.*(openshift|kube)).*') |
        list
      }}
      
- name: "TEST Display cleaned API data for {{ da_ns }}"
  ansible.builtin.debug:
    var: da_removed_api
    
- name: "Compute OCP compatibility of the workload API for {{ da_ns }}"
  vars:
    ocp_filename: "{{ deprecated_api_logs.path }}/apirequestcounts_ocp_compatibility_{{ da_ns }}_junit.xml"
  ansible.builtin.set_fact:
    ocp_compatibility: "{{ da_removed_api | redhatci.ocp.ocp_compatibility(da_ocp_version, ocp_filename) }}"

# 99.99 is used when the deprecated API check imposes no limitations
- name: "Extract the OCP version up to which the workload is compatible in {{ da_ns }}"
  ansible.builtin.set_fact:
    da_current_ns_ocp_limit: "{{ max_compatible_version }}"
  vars:
    compatible_versions: >-
      {{ ocp_compatibility | dict2items | selectattr('value', 'equalto', 'compatible') | map(attribute='key') | map('trim') | list }}
    all_values: >-
      {{ ocp_compatibility | dict2items | map(attribute='value') | list | unique }}
    highest_compatible_version: >-
      {{ compatible_versions | max | trim }}
    max_compatible_version: >-
      {{ "99.99" if all_values | length == 1 and 'compatible' in all_values else highest_compatible_version }}

- name: Compare the OCP limit for the current ns with previously examined ns and select the min
  ansible.builtin.set_fact:
    da_max_compatible_ocp_version: >-
      {%- if da_max_compatible_ocp_version is defined -%}
        {{ da_current_ns_ocp_limit if da_current_ns_ocp_limit is version(da_max_compatible_ocp_version, '<') else da_max_compatible_ocp_version }}
      {%- else -%}
        {{ da_current_ns_ocp_limit }}
      {%- endif %}
...
