---
- name: Validate the presence of parameters
  assert:
    that: "{{ item }} is defined"
    fail_msg: "The parameter {{ item }} is required"
  with_items:
      - product_name
      - product_version
      - fork_name
      - github_token_path
      - target_repository
      - work_dir
      - partner_name
      - partner_email

- name: Validate that cert_project_id is provided
  fail:
    msg: "Please define operator.pyxis_operator_identifier or use create_cert_project"
  when:
    - cert_project_id | default('') | length == 0
    - target_repository == "redhat-openshift-ecosystem/certified-operators"

- name: "Get Github Binary"
  include_tasks: get-gh-bin.yml

  # Create a fork of the project {{ target_repository }}
- name: "Login to Github"
  shell: "{{ gh_tool_path }} auth login --with-token < {{ github_token_path }}"
  args:
    chdir: "{{ work_dir }}"
  register: gh_login
  failed_when: gh_login.rc != 0

- name: "Configure Git protocol"
  shell: "{{ gh_tool_path }} config set git_protocol ssh"

- name: "Get GitHub status details"
  shell:
    cmd: "{{ gh_tool_path }} api user --jq .login"
  register: github_status

- name: "Get the GitHub username"
  set_fact:
    github_username: "{{ github_status.stdout }}"

- name: "Set local branch name"
  set_fact:
    local_branch: "{{ product_name }}_{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits') }}"

- name: "Generate a one time use SSH key"
  openssh_keypair:
    path: "{{ work_dir }}/ssh_key"
    type: ed25519
    state: present
    force: no

- name: "Read public key file contents"
  set_fact:
    public_key: "{{ lookup('file', '{{ work_dir }}/ssh_key.pub' ) }}"

- name: "Copy ssh key in SSH folder"
  copy:
    src: "{{ work_dir }}/ssh_key"
    dest: "{{ lookup('env','HOME') }}/.ssh/id_ecdsa"
    mode: '0600'
    backup: yes

- name: "Add ssh-key to Github"
  shell: "{{ gh_tool_path }} api -X POST user/keys -f key='{{ public_key }}'"
  register: gh_add_response
  args:
    chdir: "{{ work_dir }}"

- name: "Get the SSH key ID"
  set_fact:
    key_id: "{{ ( gh_add_response.stdout | from_json ).id }}"

- name: "Fork the {{ target_repository }} for {{ product_name }}"
  shell: "{{ gh_tool_path }} repo fork {{ target_repository }} --fork-name {{ fork_name }} "
  args:
    chdir: "{{ work_dir }}"
  register: gh_fork
  failed_when: gh_fork.rc != 0

- name: "Sync the {{ target_repository }} fork"
  shell: "{{ gh_tool_path }} repo sync {{ github_username }}/{{ fork_name }} --force"
  args:
    chdir: "{{ work_dir }}"
  register: gh_fork_sync
  failed_when: gh_fork_sync.rc != 0

- name: "Clone the {{ github_username }}/{{ fork_name }} repository"
  shell:
    cmd: "{{ gh_tool_path }} repo clone {{ github_username }}/{{ fork_name }}"
  args:
    chdir: "{{ work_dir }}"

- name: Create PR for Helm Chart Verifier
  include_tasks: helm_chart_verifier.yml
  when: target_repository == "openshift-helm-charts/charts"

- name: Create PR for Operator Bundle Certification
  include_tasks: bundle_operator.yml
  when: target_repository == "redhat-openshift-ecosystem/certified-operators"
...

