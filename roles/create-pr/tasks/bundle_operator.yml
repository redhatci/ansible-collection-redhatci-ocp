---
- name: "Create version directory"
  file:
    path: "{{ work_dir }}/{{ fork_name }}/operators/{{ product_name }}/{{ product_version }}"
    state: directory
    mode: '0755'

- name: "Create manifest and metadata directories"
  file:
    path: "{{ work_dir }}/{{ fork_name }}/operators/{{ product_name }}/{{ product_version }}/{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "manifests"
    - "metadata"

- name: "Git create a local branch"
  shell: "git checkout -b {{ local_branch }}"
  args:
    chdir: "{{ work_dir }}/{{ fork_name }}/operators/{{ product_name }}"

- name: "Render bundle operator image"
  vars:
    opm_auths: "/usr/share/dci-openshift-agent/utils/opm-auths"
  shell: >
    {{ opm_auths }}
    {{ opm_tool_path }} render {{ operator.bundle_image }}
  register: rendered_bundle
  retries: 2
  delay: 10
  until: rendered_bundle.rc == 0

- name: "Get inspected data"
  set_fact:
    bundle_data: "{{ rendered_bundle.stdout | from_json }}"

- name: Get operator name and version
  vars:
    name_query: "properties[? type==`olm.package`].value.packageName"
    version_query: "properties[? type==`olm.package`].value.version"
  set_fact:
    operator_name: "{{ bundle_data | json_query('name') | join('') }}"
    short_name: "{{ bundle_data | json_query(name_query) | join('') }}"
    operator_version: "{{ bundle_data | json_query(version_query) | join('') }}"

- name: Copy manifest files from bundle
  shell:
    cmd: >
      podman cp
      $(podman create --rm {{ operator.bundle_image }} bash):/manifests/. .
    chdir: "{{ work_dir }}/{{ fork_name }}/operators/{{ product_name }}/{{ product_version }}/manifests"

- name: Retrieve annotations.yaml file from bundle image
  shell:
    cmd: >
      podman cp
      $(podman create --rm {{ operator.bundle_image }} bash):/metadata/annotations.yaml .
    chdir: "{{ work_dir }}/{{ fork_name }}/operators/{{ product_name }}/{{ product_version }}/metadata"

- name: "Render CI.yaml file"
  template:
    src: ci.yaml.j2
    dest: "{{ work_dir }}/{{ fork_name }}/operators/{{ product_name }}/ci.yaml"

- name: "Git add new operator files to the repository"
  shell:
    cmd: |
      git config user.email {{ github_username }}
      git config user.name {{ github_username }}
      git add operators/{{ product_name }}
      git commit -m 'Added {{ product_name }} version {{ product_version }}'
  args:
    chdir: "{{ work_dir }}/{{ fork_name }}"

- name: Ensure that remote branch is absent to avoid merge conflicts
  shell:
    cmd: |
      eval "$(ssh-agent)"
      ssh-add {{ work_dir }}/ssh_key
      git push origin --delete {{ local_branch }}
  args:
    chdir: "{{ work_dir }}/{{ fork_name }}"
  ignore_errors: true

- name: "Push branch and create PR to the forked repository"
  shell:
    cmd: |
      eval "$(ssh-agent)"
      ssh-add {{ work_dir }}/ssh_key
      git push -u origin {{ local_branch }}
      {{ gh_tool_path }} pr create \
      --title "operator {{ product_name }} ({{ product_version }})" \
      --body "Adding Operator {{ product_name }} version {{ product_version }} - DCI Job: {{ job_id }}" \
      --repo {{ target_repository }}
  args:
    chdir: "{{ work_dir }}/{{ fork_name }}"
  register: pr_details

- name: "Get PR submission details"
  debug:
    msg: "{{ pr_details.stdout_lines[2] }}"
  when: pr_details.rc == 0
...
