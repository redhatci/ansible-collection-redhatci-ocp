---
- block:
  - name: "local-registry-setup : Check if podman container exists"
    shell: "podman container exists {{ podman_svc }}"
    ignore_errors: true
    register: podman_container_running
    changed_when: false

  - name: "local-registry-setup : Create podman container"
    shell: "{{ podman_cmd }}"
    when: podman_container_running.rc != 0

  - name: "local-registry-setup : Inspect running container"
    shell: podman inspect {{ podman_svc }}
    register: podman_inspect_data
    no_log: true
    retries: 5
    delay: 2
    changed_when: false

  - name: "local-registry-setup : Parse podman inspection data"
    set_fact:
      podman_inspect: "{{ podman_inspect_data.stdout | from_json }}"
    no_log: true

  - name: "local-registry-setup : Create systemd configuration directory"
    file:
      path: ~/.config/systemd/user
      state: directory
      recurse: true

  - name: "local-registry-setup : Create systemd configuration to autostart"
    copy:
      dest: ~/.config/systemd/user/{{ podman_svc }}.service
      content: |
        [Unit]
        Description=Podman container-{{ podman_svc }}.service
        Documentation=man:podman-generate-systemd(1)
        Wants=network.target
        After=network-online.target

        [Service]
        Environment=PODMAN_SYSTEMD_UNIT=%n
        Restart=on-failure
        ExecStart=/usr/bin/podman start {{ podman_svc }}
        ExecStop=/usr/bin/podman stop -t 10 {{ podman_svc }}
        PIDFile=/run/user/{{ registry_getent.uid }}/containers/overlay-containers/{{ podman_inspect[0].Id }}/userdata/conmon.pid
        KillMode=none
        Type=forking

        [Install]
        WantedBy=default.target

  - name: "local-registry-setup : Enable and start service"
    environment:
      XDG_RUNTIME_DIR: "/run/user/{{ registry_getent.uid }}"
    systemd:
      name: "{{ podman_svc }}.service"
      scope: user
      state: started
      enabled: true
      daemon_reload: true

  become_user: "{{ registry_user }}"
...
