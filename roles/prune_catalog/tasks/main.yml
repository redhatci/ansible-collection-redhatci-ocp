---
- name: "Validate parameters"
  ansible.builtin.assert:
    that:
      - pc_operators is defined
      - pc_operators | type_debug == "list" or
        pc_operators | type_debug == "dict"
      - pc_source_catalog is defined
      - pc_destination_catalog is defined
      - pc_source_catalog | length > 0
      - pc_destination_catalog | length > 0
    fail_msg: "At least one of the parameters requirements is missing"

- name: "Check if image is pullable - {{ pc_source_catalog }} "
  ansible.builtin.shell: >
    if [ -n "$DOCKER_CONFIG" ]; then
      skopeo inspect --no-tags \
      --authfile "$DOCKER_CONFIG/config.json" \
      --tls-verify=false docker://{{ pc_source_catalog }}
    else
      skopeo inspect --no-tags \
      --tls-verify=false docker://{{ pc_source_catalog }}
    fi
  register: skopeo_result
  changed_when: skopeo_result.rc == 0
  retries: 3
  delay: 10
  until: skopeo_result.rc == 0
  failed_when:
    - skopeo_result.rc != 0
    - not pc_ignore_pull_errors

- name: "Prune catalog"
  when: skopeo_result.rc == 0
  block:
    - name: Create temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: pc_tmp_dir.
      register: pc_tmp_dir

    - name: "Set working directory"
      ansible.builtin.set_fact:
        pc_tmp_dir: "{{ pc_tmp_dir.path }}"

    - name: "Set opm cmd"
      ansible.builtin.set_fact:
        pc_opm_cmd: "{{ pc_tmp_dir }}/opm {{ pc_opm_args }}"

    - name: "Download stable opm client"
      vars:
        ocp_clients_url: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/opm-linux.tar.gz"
      ansible.builtin.unarchive:
        src: "{{ ocp_clients_url }}"
        dest: "{{ pc_tmp_dir }}"
        remote_src: true
        mode: "0755"
      register: result
      retries: 3
      delay: 10
      until: result is not failed

    - name: "Create index working directory"
      ansible.builtin.file:
        path: "{{ pc_tmp_dir }}/configs"
        state: directory
        mode: "0755"

    - name: "Render the source catalog"
      vars:
        opm_auths: "/usr/share/dci-openshift-agent/utils/opm-auths"
      ansible.builtin.shell:
        chdir: "{{ pc_tmp_dir }}"
        cmd: >
          set -x;
          {{ opm_auths }}
          opm render {{ pc_source_catalog }} >
          index-packages
      register: prune_result
      changed_when: prune_result.rc == 0
      until: prune_result.rc == 0
      retries: 3
      delay: 10

    - name: "Extract the listed channels for each operator"
      when: pc_operators | type_debug == "dict"
      block:
        - name: "Extract the listed channels for each operator"
          ansible.builtin.include_tasks:
            file: extract-channel.yml

    - name: "Extract the listed operators"
      when: pc_operators | type_debug == "list"
      block:
        - name: "Extract the listed operators"
          ansible.builtin.include_tasks:
            file: extract-operators.yml

    - name: "Copy configs.Dockerfile to temp directory"
      ansible.builtin.copy:
        content: |
          FROM quay.io/operator-framework/opm:latest
          ENTRYPOINT ["/bin/opm"]
          CMD ["serve", "/configs"]
          ADD configs /configs
          LABEL operators.operatorframework.io.index.configs.v1=/configs
          LABEL maintainer={{ pc_maintainer }} {% if pc_expire %} quay.expires-after={{ pc_expire_time }}{% endif %}
        dest: "{{ pc_tmp_dir }}/configs.Dockerfile"
        mode: "0644"

    - name: "Validate the pruned index"
      ansible.builtin.shell: |
        opm validate configs/
      args:
        chdir: "{{ pc_tmp_dir }}"
      register: validate_result
      changed_when: validate_result.rc == 0

    - name: "Build the index image"
      ansible.builtin.shell:
        chdir: "{{ pc_tmp_dir }}"
        cmd: >
          set -x;
          podman build
          --no-cache
          -t {{ pc_destination_catalog }}
          -f {{ pc_tmp_dir }}/configs.Dockerfile .
      register: build_result
      changed_when: build_result.rc == 0

    - name: "Pruned image"
      ansible.builtin.debug:
        msg: "Catalog image build as {{ pc_destination_catalog }}"
  always:
    - name: "Delete temp directory"
      ansible.builtin.file:
        state: absent
        path: "{{ pc_tmp_dir }}"
...
