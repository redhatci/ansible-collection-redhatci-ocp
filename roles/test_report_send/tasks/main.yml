# SPDX-License-Identifier: Apache-2.0
---
# tasks file for redhatci.ocp.test_report_send

- name: Verify all input variables are set
  ansible.builtin.assert:
    that: "{{ item }}"
  loop:
    - trs_report_path | default("") | length > 0
    - trs_extra_metadata_path | default("") | length >= 0
    - trs_collector_url  | default("") | length > 0
    - trs_collector_auth_token | default("") | length > 0
    - trs_collector_target | default("") | length > 0

- name: Collect trs_report_path file stat
  ansible.builtin.stat:
    path: "{{ trs_report_path }}"
  register: _trs_report_path_stat

- name: Ensure trs_report_path file exists
  ansible.builtin.assert:
    that: _trs_report_path_stat.stat.isreg | default(false)

# Mostly copied from @cplacani PR: https://github.com/openshift-kni/eco-validation/pull/150/files

- name: Read content from test report JSON file
  ansible.builtin.slurp:
    src: "{{ trs_report_path }}"
  register: _trs_json_file_content

- name: Decode JSON content of test report file
  ansible.builtin.set_fact:
    trs_test_data: "{{ _trs_json_file_content.content | b64decode | from_json }}"


- name: Collect trs_metadata_path file stat
  ansible.builtin.stat:
    path: "{{ trs_metadata_path }}"
  register: _trs_metadata_path_stat
  when:
    - trs_metadata_path | default("") | length > 0


- name: Read content of metadata JSON file
  ansible.builtin.slurp:
    src: "{{ trs_metadata_path }}"
  register: _trs_metadata_file_content
  when:
    - _trs_metadata_path_stat.stat.isreg | default(false)

- name: Setup content for metadata file
  ansible.builtin.set_fact:
    trs_meta_data: {}

- name: Decode JSON content for metadata file
  ansible.builtin.set_fact:
    trs_meta_data: "{{ _trs_metadata_file_content.content | b64decode | from_json }}"
  when:
    - _trs_metadata_file_content.content | default("") | length > 0

- name: Create event data attributes
  ansible.builtin.set_fact:
    trs_data_event: '{{ {"test": trs_test_data} | combine(trs_meta_data) }}'
    # trs_event_time: "{{ now(fmt='%s') }}"

- name: Setup timestamps broken down to int/float parts
  ansible.builtin.set_fact:
    trs_job_time_int: "{{ (trs_meta_data.metadata.job.created_at | regex_replace('\\..*$', '') | to_datetime('%Y-%m-%dT%H:%M:%S')).strftime('%s') | int }}"
    trs_job_time_fraction: "{{ trs_meta_data.metadata.job.created_at | regex_replace('^.*\\.', '0.') | float | round(3) }}"

- name: Setup timestamps as floats
  ansible.builtin.set_fact:
    trs_job_time: "{{ (trs_job_time_int | int) + (trs_job_time_fraction | float) }}"

- name: Set event time if we have job_time
  ansible.builtin.set_fact:
    # trs_event_time: "{{ trs_job_time | float }}"
    trs_event_channel: "{{ splunk.channels.get(global_partner, 'default') }}"
  when:
    - (trs_job_time_int | int) > 0

- name: Print event data
  ansible.builtin.debug:
    var: trs_data_event
  # loop:
  #   - trs_data_event
  #   - job_time

# - name: Get currently set hostname
#   ansible.builtin.shell: |
#     hostname -f
#   args:
#     executable: /bin/bash
#   register: hostname_result

- name: Combine additional attributes into the data
  ansible.builtin.set_fact:
    trs_event_payload: >
      {{
      {
        "source": trs_collector_target,
        "event": trs_data_event,
        "host": trs_collector_url,
        "sourcetype": "_json"
      }
      }}

- name: Print payload data
  ansible.builtin.debug:
    var: trs_event_payload

- name: Send data to collector
  ansible.builtin.uri:
    url: "{{ trs_collector_url }}"
    method: POST
    headers: "{{ trs_collector_auth_headers | default(omit) }}"
    body: "{{ trs_event_payload }}"
    body_format: json
    follow_redirects: all
    validate_certs: false
    timeout: "{{ global_request_timeout | default(omit) }}"
  register: _trs_splunk_response
