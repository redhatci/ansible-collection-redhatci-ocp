---
- name: "Read release_image from release.txt"  # noqa: command-instead-of-module
  ansible.builtin.shell:
    cmd: >
      sed -n 's/Pull From:\s*\(.*\)/\1/p'
      {{ mor_cache_dir }}/{{ mor_version }}/release.txt | tr -d '[[:blank:]]'
  register: release_image
  changed_when: false

- name: Write rhcos.json from command (4.16+)
  when: mor_version is version("4.16", ">=")
  containers.podman.podman_container:
    name: extract-rhcos
    image: quay.io/centos/centos:stream9
    command:
      - /bin/bash
      - -c
      - "/ocp/openshift-baremetal-install coreos print-stream-json > /ocp/rhcos.json"
    rm: true
    volumes:
      - "{{ mor_cache_dir }}/{{ mor_version }}:/ocp"

- name: "Write rhcos.json from command (4.8 - 4.15)"
  ansible.builtin.shell: >
    {{ mor_cache_dir }}/{{ mor_version }}/openshift-baremetal-install coreos print-stream-json >
    {{ mor_cache_dir }}/{{ mor_version }}/rhcos.json
  when:
    - mor_version is version("4.16", "<")
    - mor_version is version("4.8", ">=")
  changed_when: true

# TODO: Remove this block when 4.7 is no longer supported
- name: "Download rhcos.json (< 4.8)"
  when:
    - mor_version is version("4.8", "<")
  block:
    - name: "Get Git SHA from installer"
      ansible.builtin.shell: >
        {{ mor_cache_dir }}/{{ mor_version }}/openshift-baremetal-install version |
        grep "^built from" |
        awk '{ print $NF }'
      register: commit_id
      changed_when: false

    - name: "Fetch rhcos.json"
      ansible.builtin.include_tasks: fetch.yml
      vars:
        uri: "https://raw.githubusercontent.com/openshift/installer/{{ commit_id.stdout }}/data/data/rhcos.json"
        mor_dir: "{{ mor_cache_dir }}/{{ mor_version }}"

- name: "Read the contents of rhcos.json"
  ansible.builtin.command: "cat {{ mor_cache_dir }}/{{ mor_version }}/rhcos.json"
  register: rhcos

- name: "Set image facts"
  ansible.builtin.set_fact:
    ocp_release_data:
      container_image: "{{ release_image.stdout }}"
      rhcos_version: "{{ rhcos.stdout | from_json | json_query('architectures.x86_64.artifacts.metal.release') }}"
      rhcos_images: "{{ ocp_release_data['rhcos_images'] | default({}) | combine({item.key: (rhcos.stdout | from_json | json_query('architectures.x86_64.artifacts.' + item.path))}) }}"
  with_items:
    - {'key': 'aws_location', 'path': 'aws.formats."vmdk.gz".disk.location'}
    - {'key': 'aws_sha256', 'path': 'aws.formats."vmdk.gz".disk.sha256'}
    - {'key': 'azure_location', 'path': 'azure.formats."vhd.gz".disk.location'}
    - {'key': 'azure_sha256', 'path': 'azure.formats."vhd.gz".disk.sha256'}
    - {'key': 'azurestack_location', 'path': 'azurestack.formats."vhd.gz".disk.location'}
    - {'key': 'azurestack_sha256', 'path': 'azurestack.formats."vhd.gz".disk.sha256'}
    - {'key': 'gcp_location', 'path': 'gcp.formats."tar.gz".disk.location'}
    - {'key': 'gcp_sha256', 'path': 'gcp.formats."tar.gz".disk.sha256'}
    - {'key': 'ibmcloud_location', 'path': 'ibmcloud.formats."qcow2.gz".disk.location'}
    - {'key': 'ibmcloud_sha256', 'path': 'ibmcloud.formats."qcow2.gz".disk.sha256'}
    - {'key': 'metal_iso_location', 'path': 'metal.formats.iso.disk.location'}
    - {'key': 'metal_iso_sha256', 'path': 'metal.formats.iso.disk.sha256'}
    - {'key': 'metal_pxe_kernel_location', 'path': 'metal.formats.pxe.kernel.location'}
    - {'key': 'metal_pxe_kernel_sha256', 'path': 'metal.formats.pxe.kernel.sha256'}
    - {'key': 'metal_pxe_initramfs_location', 'path': 'metal.formats.pxe.initramfs.location'}
    - {'key': 'metal_pxe_initramfs_sha256', 'path': 'metal.formats.pxe.initramfs.sha256'}
    - {'key': 'metal_pxe_rootfs_location', 'path': 'metal.formats.pxe.rootfs.location'}
    - {'key': 'metal_pxe_rootfs_sha256', 'path': 'metal.formats.pxe.rootfs.sha256'}
    - {'key': 'metal_rawgz_location', 'path': 'metal.formats."raw.gz".disk.location'}
    - {'key': 'metal_rawgz_sha256', 'path': 'metal.formats."raw.gz".disk.sha256'}
    - {'key': 'openstack_location', 'path': 'openstack.formats."qcow2.gz".disk.location'}
    - {'key': 'openstack_sha256', 'path': 'openstack.formats."qcow2.gz".disk.sha256'}
    - {'key': 'qemu_location', 'path': 'qemu.formats."qcow2.gz".disk.location'}
    - {'key': 'qemu_sha256', 'path': 'qemu.formats."qcow2.gz".disk.sha256'}
    - {'key': 'qemu_uncompressed_sha256', 'path': 'qemu.formats."qcow2.gz".disk."uncompressed-sha256"'}  # only needed for bootstraposimage fact
    - {'key': 'vmware_location', 'path': 'vmware.formats.ova.disk.location'}
    - {'key': 'vmware_sha256', 'path': 'vmware.formats.ova.disk.sha256'}
  when:
    - mor_version is version("4.8", ">=")

# TODO: Remove this task when 4.7 is no longer supported
- name: "Set image facts (< 4.8)"
  vars:
    rhcos_ver: "{{ rhcos.stdout | from_json | json_query('buildid') }}"
    base_uri: "https://rhcos.mirror.openshift.com/art/storage/releases/rhcos-{{ mor_base_version }}/{{ rhcos_ver }}/x86_64/"
  ansible.builtin.set_fact:
    ocp_release_data:
      container_image: "{{ release_image.stdout }}"
      rhcos_version: "{{ rhcos_ver }}"
      rhcos_images: "{{ ocp_release_data['rhcos_images'] | default({}) | combine({item.key: (item.baseURI | default('')) + (rhcos.stdout | from_json | json_query('images.' + item.path))}) }}"
  with_items:
    - {'key': 'aws_location', 'baseURI': "{{ base_uri }}", 'path': 'aws.path'}
    - {'key': 'aws_sha256', 'path': 'aws.sha256'}
    - {'key': 'azure_location', 'baseURI': "{{ base_uri }}", 'path': 'azure.path'}
    - {'key': 'azure_sha256', 'path': 'azure.sha256'}
    - {'key': 'gcp_location', 'baseURI': "{{ base_uri }}", 'path': 'gcp.path'}
    - {'key': 'gcp_sha256', 'path': 'gcp.sha256'}
    - {'key': 'ibmcloud_location', 'baseURI': "{{ base_uri }}", 'path': 'ibmcloud.path'}
    - {'key': 'ibmcloud_sha256', 'path': 'ibmcloud.sha256'}
    - {'key': 'metal_iso_location', 'baseURI': "{{ base_uri }}", 'path': '"live-iso".path'}
    - {'key': 'metal_iso_sha256', 'path': '"live-iso".sha256'}
    - {'key': 'metal_pxe_kernel_location', 'baseURI': "{{ base_uri }}", 'path': '"live-kernel".path'}
    - {'key': 'metal_pxe_kernel_sha256', 'path': '"live-kernel".sha256'}
    - {'key': 'metal_pxe_initramfs_location', 'baseURI': "{{ base_uri }}", 'path': '"live-initramfs".path'}
    - {'key': 'metal_pxe_initramfs_sha256', 'path': '"live-initramfs".sha256'}
    - {'key': 'metal_pxe_rootfs_location', 'baseURI': "{{ base_uri }}", 'path': '"live-rootfs".path'}
    - {'key': 'metal_pxe_rootfs_sha256', 'path': '"live-rootfs".sha256'}
    - {'key': 'metal_rawgz_location', 'baseURI': "{{ base_uri }}", 'path': 'metal.path'}
    - {'key': 'metal_rawgz_sha256', 'path': 'metal.sha256'}
    - {'key': 'openstack_location', 'baseURI': "{{ base_uri }}", 'path': 'openstack.path'}
    - {'key': 'openstack_sha256', 'path': 'openstack.sha256'}
    - {'key': 'qemu_location', 'baseURI': "{{ base_uri }}", 'path': 'qemu.path'}
    - {'key': 'qemu_sha256', 'path': 'qemu.sha256'}
    - {'key': 'qemu_uncompressed_sha256', 'path': 'qemu."uncompressed-sha256"'}  # only needed for bootstraposimage fact
    - {'key': 'vmware_location', 'baseURI': "{{ base_uri }}", 'path': 'vmware.path'}
    - {'key': 'vmware_sha256', 'path': 'vmware.sha256'}
  when:
    - mor_version is version("4.8", "<")

# NOTE: using uncompressed-sha256 for the bootstraposimage is not a mistake,
# but needed on OCP versions prior to 4.8. The reason being, when the installer
# retrieves the image, it will first uncompress it, and then verify the SHA,
# and the SHA used for verification is the one in the URL.
# TODO: remove for releases >= 4.8
- name: "Set facts for *osimage URL overrides"
  ansible.builtin.set_fact:
    bootstraposimage: "{{ mor_webserver_url }}/{{ ocp_release_data['rhcos_images']['qemu_location'] | basename }}?sha256={{ ocp_release_data['rhcos_images']['qemu_uncompressed_sha256'] }}"
    clusterosimage: "{{ mor_webserver_url }}/{{ ocp_release_data['rhcos_images']['openstack_location'] | basename }}?sha256={{ ocp_release_data['rhcos_images']['openstack_sha256'] }}"
    metalosimage: "{{ mor_webserver_url }}/{{ ocp_release_data['rhcos_images']['metal_iso_location'] | basename }}?sha256={{ ocp_release_data['rhcos_images']['metal_iso_sha256'] }}"
  when:
    - mor_write_custom_config | bool
...
