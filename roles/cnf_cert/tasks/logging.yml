---

- name: Set tnf_logs_location variable
  ansible.builtin.set_fact:
    tnf_logs_location: "{{ tnf_dir }}/{{ test_network_function_project_name }}"

# There are three types of files to be submitted:
# - Configuration files - tnf_config.yml
# - Execution logs - dci-tnf-execution.log and cnf-certsuite.log, if exists
# - Results of the execution (only generated if tnf execution was correct) -
#   JUnit XML report and claim.json file
- name: Copy files related to CNF Cert Suite
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}"
    mode: "0750"
  with_fileglob:
    - "{{ tnf_logs_location }}/tnf_config.yml"
    - "{{ tnf_logs_location }}/*.log"
    - "{{ tnf_logs_location }}/*.xml"
    - "{{ tnf_logs_location }}/*.json"

# Since we need to manually unarchive-archive the report, we need to firstly check if the compressed
# file exists.
- name: Check if HTML report has been generated and copied
  ansible.builtin.find:
    paths: "{{ tnf_logs_location }}"
    patterns:
      - "*-cnf-test-results.tar.gz"
  register: html_report_search

- name: Update HTML report
  when: html_report_search.files | length > 0
  block:
    # Just to reuse the same file name, let's save it now.
    - name: Set HTML report compressed file name based on the one generated by CNF Cert Suite
      ansible.builtin.set_fact:
        html_report_filename: "{{ html_report_search.files[0].path.split('/')[-1] }}"

    - name: Create new directory to uncompress files from HTML report compressed file
      ansible.builtin.file:
        path: "{{ tnf_logs_location }}/cnf-test-results"
        state: directory

    - name: Unarchive original HTML report
      ansible.builtin.unarchive:
        src: "{{ tnf_logs_location }}/{{ html_report_filename }}"
        dest: "{{ tnf_logs_location }}/cnf-test-results"

    - name: Create feedback.js
      ansible.builtin.template:
        src: templates/feedback.js.j2
        dest: "{{ tnf_logs_location }}/cnf-test-results/feedback.js"

    - name: Compress HTML results web page to upload it to DCI
      ansible.builtin.archive:
        path:
          - "{{ tnf_logs_location }}/cnf-test-results/*"
        dest: "{{ job_logs.path }}/{{ html_report_filename }}"

# claim.json file must be present if the execution finished correctly
# This is needed for the next blocks.
- name: Check the presence of claim.json
  ansible.builtin.stat:
    path: "{{ tnf_logs_location }}/claim.json"
  register: claim_json_present

# This must be done after executing tnf, since tnf logs allows us to retrieve the commit SHA from
# cnf-certification-test repo in which the image is based, so that we can compare it with the one
# extracted from the cloned repo.
# Make the job to fail if the commit SHA is not found in the proper place in the logs, and if
# this feature is enabled (disabled by default).
# This check can only be done if CNF Cert was executed correctly (so claim.json file exists).
- name: Confirm we are testing the correct CNF Cert code
  ansible.builtin.lineinfile:
    path: "{{ tnf_logs_location }}/dci-tnf-execution.log"
    regex: '.*{{ tnf_commit_sha }}'
    state: absent
  changed_when: false
  check_mode: true
  register: commit_check
  failed_when: commit_check.found != 1
  when:
    - claim_json_present.stat.exists|bool
    - tnf_commit_sha is defined
    - tnf_check_commit_sha|bool
...
