---
<<<<<<< HEAD
- name: "Set the complete path to JUnit file {{ t.filename }}"
  set_fact:
    junit_filename: "{{ job_logs.path }}/{{ t.filename }}"

- name: "Verify the presence of {{ t.filename }} in the log folder"
  stat:
    path: "{{ junit_filename }}"
  register: junit_file

- name: "Fail if {{ t.filename }} is not present in the log folder"
  fail:
    msg: "Could not verify test results: {{ t.filename }} is not present"
=======
- name: "Verify the presence of {{ item | basename }} in the log folder"
  stat:
    path: "{{ item }}"
  register: junit_file

- name: "Fail if {{ item | basename }} is not present in the log folder"
  fail:
    msg: "Could not verify test results: {{ item | basename }} is not present"
>>>>>>> mixin/main
  failed_when:
    - not junit_file.stat.exists
    # Do not fail when the option to skip missing files is on
    - not skip_absent_testfiles | bool

- block:
    - name: Verify JUnit format and fix wrapping testsuites tags if required
      block:
        - name: "Insert opening <testsuites> tag"
          lineinfile:
<<<<<<< HEAD
            path: "{{ junit_filename }}"
=======
            path: "{{ item }}"
>>>>>>> mixin/main
            insertbefore: '<testsuite'
            line: '<testsuites>'

        - name: "Insert closing </testsuites> tag"
          lineinfile:
<<<<<<< HEAD
            path: "{{ junit_filename }}"
=======
            path: "{{ item }}"
>>>>>>> mixin/main
            insertafter: EOF
            line: '</testsuites>'
      when: junit_fix_tags | default(false) | bool

<<<<<<< HEAD
    - name: "Retrieve the actual test results from {{ t.filename }}"
      set_fact:
        actual_results: "{{ junit_filename | junit2dict }}"

    - name: "Fail if not all test results are as expected for {{ t.filename }}"
=======
    - name: "Retrieve the actual test results from {{ item | basename }}"
      set_fact:
        actual_results: "{{ item | junit2dict }}"

    - name: "Fail if not all test results are as expected for {{ item | basename }}"
>>>>>>> mixin/main
      vars:
        expectation_failed: "{{ t.expected_results | regex_diff(actual_results) }}"
      fail:
        msg: "The following expectations failed: {{ expectation_failed }}"
      when: expectation_failed | length > 0
  when: junit_file.stat.exists
...
