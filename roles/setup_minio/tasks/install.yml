---
- name: Create namespace for Minio
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ sm_namespace }}"
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/enforce-version: latest
          security.openshift.io/scc.podSecurityLabelSync: "false"

- name: Create Minio PVC
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ pvc_name }}"
        namespace: "{{ sm_namespace }}"
      spec:
        storageClassName:  "{{ sm_storage_class }}"
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "{{ sm_claim_size }}"

- name: Wait for Minio PVC to be Bound
  community.kubernetes.k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ sm_namespace }}"
    name: "{{ pvc_name }}"
  register: minio_pvc
  until:
    - minio_pvc.resources is defined
    - minio_pvc.resources[0].status.phase == "Bound"
  retries: 6
  delay: 10

- name: Create the minio deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ deployment_name }}"
        namespace: "{{ sm_namespace }}"
      spec:
        selector:
          matchLabels:
            app: minio
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: minio
          spec:
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: minio-pvc-claim
            containers:
            - name: minio
              volumeMounts:
                - name: data 
                  mountPath: /data
              image: "{{ sm_minio_image }}"
              args:
              - server
              - /data
              env:
                - name: MINIO_ACCESS_KEY
                  value: "{{ sm_access_key_id }}"
                - name: MINIO_SECRET_KEY
                  value: "{{ sm_access_key_secret }}"
              ports:
              - containerPort: 9000
              readinessProbe:
                httpGet:
                  path: /minio/health/ready
                  port: 9000
                initialDelaySeconds: 120
                periodSeconds: 20
              livenessProbe:
                httpGet:
                  path: /minio/health/live
                  port: 9000
                initialDelaySeconds: 120
                periodSeconds: 20

- name: Create the minio service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ service_name }}"
        namespace: "{{ sm_namespace }}"
      spec:
        type: "{{ sm_service_type }}"
        ports:
          - name: http
            port: 9000
            targetPort: 9000
            protocol: TCP
        selector:
          app: minio

- name: Get service info
  community.kubernetes.k8s_info:
    kind: Service
    name: minio-service
    namespace: "{{ sm_namespace }}"
  register: service_info

- name: "Create the initial bucket"
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: minio-bucket-creation
        namespace: minio
      spec:
        template:
          metadata:
            name: minio-bucket-creation
          spec:
            containers:
              - name: minio-client
                image: "{{ sm_minio_client }}"
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                    mc --config-dir /tmp/ alias set local http://minio-service.{{ sm_namespace }}:9000 \
                    {{ sm_access_key_id }} {{ sm_access_key_secret }} --api S3v4;
                    mc --config-dir /tmp/ mb --ignore-existing local/{{ sm_bucket_name }}
            restartPolicy: Never
    wait: true
    wait_sleep: 10
    wait_timeout: 420
    wait_condition:
      type: Complete
      status: "True"
...
